{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint",
    "react-hooks",
    "html"
  ],
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "comma-dangle": ["error", "always-multiline"],
    "comma-style": ["error", "last"],
    "function-call-argument-newline": ["error", "consistent"],
    "function-paren-newline": ["error", "consistent"],
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "groups": [
          "type",
          "builtin",
          ["index", "sibling", "parent"],
          "internal",
          "external",
          "object"
        ],
        "newlines-between": "always"
      }
    ],
    "indent": ["error", 2],
    "newline-per-chained-call": 2,
    // Ignore import, default message for react-intl-universal
    "max-len": ["error", {"code": 120, "ignorePattern": "(^import|\\.d\\()"}],
    "object-curly-spacing": ["error", "never"],
    "quotes": ["error", "single", {
      "avoidEscape": true
    }],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "react/prop-types": "off",
    "react/jsx-boolean-value": ["error", "always"],
    "react/jsx-closing-bracket-location": ["error", "tag-aligned"],
    "react/jsx-first-prop-new-line": ["error", "multiline"],
    "react/jsx-max-props-per-line": ["error", {
      "maximum": 1,
      "when": "always"
    }],
    "react/jsx-sort-props": ["error", {
      "ignoreCase": true,
      "callbacksLast": true
    }],
    "react/jsx-wrap-multilines": ["error", {
      "declaration": "parens-new-line",
      "assignment": "parens-new-line",
      "return": "parens-new-line",
      "arrow": "parens-new-line",
      "condition": "parens-new-line",
      "logical": "parens-new-line",
      "prop": "parens-new-line"
    }],
    "semi-style": ["error", "last"],
    "semi": ["error", "always"]
  },
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect"
    }
  }
}