package main

import (
	"api/lib"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"text/template"
)

type IntlData struct {
	Key   string
	Value string
}

const codeTemplateString = `// Generated by go generate; DO NOT EDIT
package intlgenerated

const (
{{ range .Keys }}
	{{.Key}} = "{{ .Value }}"
{{ end }}
)
`

//go:generate go run main.go
func main() {
	jsonUtils := lib.NewJsonUtils()
	var enUsIntl map[string]string
	err := jsonUtils.UnmarshalFile("../../../i18n/translations/en-US.json", &enUsIntl)
	if err != nil {
		fmt.Println(err)
		return
	}

	keys := make([]IntlData, len(enUsIntl))
	i := 0
	for k := range enUsIntl {
		keys[i] = IntlData{
			Key: strings.ToUpper(
				strings.ReplaceAll(
					strings.ReplaceAll(k, "-", "_"),
					".",
					"__",
				),
			),
			Value: k,
		}
		i += 1
	}
	sort.Slice(
		keys,
		func(i int, j int) bool {
			return keys[i].Key < keys[j].Key
		},
	)

	outFilePath := "../../intl/intlgenerated/keys.go"
	outFileDir := filepath.Dir(outFilePath)
	err = os.MkdirAll(outFileDir, os.ModePerm)
	if err != nil {
		panic(err)
	}

	f, err := os.Create(outFilePath)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	codeTemplate := template.Must(
		template.New("").Parse(codeTemplateString),
	)
	codeTemplate.Execute(
		f,
		struct {
			Keys []IntlData
		}{
			Keys: keys,
		},
	)
	fmt.Println("Intl keys synchronized")
}
