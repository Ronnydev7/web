// Code generated by mockery v2.36.1. DO NOT EDIT.

package viewermocks

import mock "github.com/stretchr/testify/mock"

// Viewer is an autogenerated mock type for the Viewer type
type Viewer struct {
	mock.Mock
}

type Viewer_Expecter struct {
	mock *mock.Mock
}

func (_m *Viewer) EXPECT() *Viewer_Expecter {
	return &Viewer_Expecter{mock: &_m.Mock}
}

// GetId provides a mock function with given fields:
func (_m *Viewer) GetId() (int, bool) {
	ret := _m.Called()

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func() (int, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Viewer_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type Viewer_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *Viewer_Expecter) GetId() *Viewer_GetId_Call {
	return &Viewer_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *Viewer_GetId_Call) Run(run func()) *Viewer_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Viewer_GetId_Call) Return(id int, exists bool) *Viewer_GetId_Call {
	_c.Call.Return(id, exists)
	return _c
}

func (_c *Viewer_GetId_Call) RunAndReturn(run func() (int, bool)) *Viewer_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// IsAdmin provides a mock function with given fields:
func (_m *Viewer) IsAdmin() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Viewer_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type Viewer_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
func (_e *Viewer_Expecter) IsAdmin() *Viewer_IsAdmin_Call {
	return &Viewer_IsAdmin_Call{Call: _e.mock.On("IsAdmin")}
}

func (_c *Viewer_IsAdmin_Call) Run(run func()) *Viewer_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Viewer_IsAdmin_Call) Return(_a0 bool) *Viewer_IsAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Viewer_IsAdmin_Call) RunAndReturn(run func() bool) *Viewer_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// IsSuperuser provides a mock function with given fields:
func (_m *Viewer) IsSuperuser() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Viewer_IsSuperuser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSuperuser'
type Viewer_IsSuperuser_Call struct {
	*mock.Call
}

// IsSuperuser is a helper method to define mock.On call
func (_e *Viewer_Expecter) IsSuperuser() *Viewer_IsSuperuser_Call {
	return &Viewer_IsSuperuser_Call{Call: _e.mock.On("IsSuperuser")}
}

func (_c *Viewer_IsSuperuser_Call) Run(run func()) *Viewer_IsSuperuser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Viewer_IsSuperuser_Call) Return(_a0 bool) *Viewer_IsSuperuser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Viewer_IsSuperuser_Call) RunAndReturn(run func() bool) *Viewer_IsSuperuser_Call {
	_c.Call.Return(run)
	return _c
}

// NewViewer creates a new instance of Viewer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewViewer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Viewer {
	mock := &Viewer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
