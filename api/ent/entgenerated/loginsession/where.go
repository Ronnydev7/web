// Code generated by ent, DO NOT EDIT.

package loginsession

import (
	"api/ent/entgenerated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldEQ(FieldOwnerID, v))
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldEQ(FieldLastLoginTime, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldNotIn(FieldOwnerID, vs...))
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v time.Time) predicate.LoginSession {
	return predicate.LoginSession(sql.FieldLTE(FieldLastLoginTime, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.LoginSession {
	return predicate.LoginSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.LoginSession {
	return predicate.LoginSession(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginSession) predicate.LoginSession {
	return predicate.LoginSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginSession) predicate.LoginSession {
	return predicate.LoginSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginSession) predicate.LoginSession {
	return predicate.LoginSession(sql.NotPredicates(p))
}
