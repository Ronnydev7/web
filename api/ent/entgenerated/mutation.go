// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"api/ent/entgenerated/emailcredential"
	"api/ent/entgenerated/loginsession"
	"api/ent/entgenerated/predicate"
	"api/ent/entgenerated/superuserprofile"
	"api/ent/entgenerated/user"
	"api/ent/entgenerated/userpublicprofile"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEmailCredential   = "EmailCredential"
	TypeLoginSession      = "LoginSession"
	TypeSuperuserProfile  = "SuperuserProfile"
	TypeUser              = "User"
	TypeUserPublicProfile = "UserPublicProfile"
)

// EmailCredentialMutation represents an operation that mutates the EmailCredential nodes in the graph.
type EmailCredentialMutation struct {
	config
	op            Op
	typ           string
	id            *int
	email         *string
	algorithm     *emailcredential.Algorithm
	password_hash *[]byte
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*EmailCredential, error)
	predicates    []predicate.EmailCredential
}

var _ ent.Mutation = (*EmailCredentialMutation)(nil)

// emailcredentialOption allows management of the mutation configuration using functional options.
type emailcredentialOption func(*EmailCredentialMutation)

// newEmailCredentialMutation creates new mutation for the EmailCredential entity.
func newEmailCredentialMutation(c config, op Op, opts ...emailcredentialOption) *EmailCredentialMutation {
	m := &EmailCredentialMutation{
		config:        c,
		op:            op,
		typ:           TypeEmailCredential,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailCredentialID sets the ID field of the mutation.
func withEmailCredentialID(id int) emailcredentialOption {
	return func(m *EmailCredentialMutation) {
		var (
			err   error
			once  sync.Once
			value *EmailCredential
		)
		m.oldValue = func(ctx context.Context) (*EmailCredential, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmailCredential.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmailCredential sets the old EmailCredential of the mutation.
func withEmailCredential(node *EmailCredential) emailcredentialOption {
	return func(m *EmailCredentialMutation) {
		m.oldValue = func(context.Context) (*EmailCredential, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailCredentialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailCredentialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entgenerated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailCredentialMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailCredentialMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmailCredential.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerID sets the "owner_id" field.
func (m *EmailCredentialMutation) SetOwnerID(i int) {
	m.owner = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *EmailCredentialMutation) OwnerID() (r int, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the EmailCredential entity.
// If the EmailCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailCredentialMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *EmailCredentialMutation) ResetOwnerID() {
	m.owner = nil
}

// SetEmail sets the "email" field.
func (m *EmailCredentialMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *EmailCredentialMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the EmailCredential entity.
// If the EmailCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailCredentialMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *EmailCredentialMutation) ResetEmail() {
	m.email = nil
}

// SetAlgorithm sets the "algorithm" field.
func (m *EmailCredentialMutation) SetAlgorithm(e emailcredential.Algorithm) {
	m.algorithm = &e
}

// Algorithm returns the value of the "algorithm" field in the mutation.
func (m *EmailCredentialMutation) Algorithm() (r emailcredential.Algorithm, exists bool) {
	v := m.algorithm
	if v == nil {
		return
	}
	return *v, true
}

// OldAlgorithm returns the old "algorithm" field's value of the EmailCredential entity.
// If the EmailCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailCredentialMutation) OldAlgorithm(ctx context.Context) (v emailcredential.Algorithm, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlgorithm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlgorithm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlgorithm: %w", err)
	}
	return oldValue.Algorithm, nil
}

// ResetAlgorithm resets all changes to the "algorithm" field.
func (m *EmailCredentialMutation) ResetAlgorithm() {
	m.algorithm = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *EmailCredentialMutation) SetPasswordHash(b []byte) {
	m.password_hash = &b
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *EmailCredentialMutation) PasswordHash() (r []byte, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the EmailCredential entity.
// If the EmailCredential object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailCredentialMutation) OldPasswordHash(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *EmailCredentialMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *EmailCredentialMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[emailcredential.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *EmailCredentialMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EmailCredentialMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EmailCredentialMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the EmailCredentialMutation builder.
func (m *EmailCredentialMutation) Where(ps ...predicate.EmailCredential) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmailCredentialMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmailCredentialMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmailCredential, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmailCredentialMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmailCredentialMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmailCredential).
func (m *EmailCredentialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailCredentialMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.owner != nil {
		fields = append(fields, emailcredential.FieldOwnerID)
	}
	if m.email != nil {
		fields = append(fields, emailcredential.FieldEmail)
	}
	if m.algorithm != nil {
		fields = append(fields, emailcredential.FieldAlgorithm)
	}
	if m.password_hash != nil {
		fields = append(fields, emailcredential.FieldPasswordHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailCredentialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emailcredential.FieldOwnerID:
		return m.OwnerID()
	case emailcredential.FieldEmail:
		return m.Email()
	case emailcredential.FieldAlgorithm:
		return m.Algorithm()
	case emailcredential.FieldPasswordHash:
		return m.PasswordHash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailCredentialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emailcredential.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case emailcredential.FieldEmail:
		return m.OldEmail(ctx)
	case emailcredential.FieldAlgorithm:
		return m.OldAlgorithm(ctx)
	case emailcredential.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	}
	return nil, fmt.Errorf("unknown EmailCredential field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailCredentialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emailcredential.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case emailcredential.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case emailcredential.FieldAlgorithm:
		v, ok := value.(emailcredential.Algorithm)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlgorithm(v)
		return nil
	case emailcredential.FieldPasswordHash:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	}
	return fmt.Errorf("unknown EmailCredential field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailCredentialMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailCredentialMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailCredentialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmailCredential numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailCredentialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailCredentialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailCredentialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EmailCredential nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailCredentialMutation) ResetField(name string) error {
	switch name {
	case emailcredential.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case emailcredential.FieldEmail:
		m.ResetEmail()
		return nil
	case emailcredential.FieldAlgorithm:
		m.ResetAlgorithm()
		return nil
	case emailcredential.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	}
	return fmt.Errorf("unknown EmailCredential field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailCredentialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, emailcredential.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailCredentialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emailcredential.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailCredentialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailCredentialMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailCredentialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, emailcredential.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailCredentialMutation) EdgeCleared(name string) bool {
	switch name {
	case emailcredential.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailCredentialMutation) ClearEdge(name string) error {
	switch name {
	case emailcredential.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown EmailCredential unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailCredentialMutation) ResetEdge(name string) error {
	switch name {
	case emailcredential.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown EmailCredential edge %s", name)
}

// LoginSessionMutation represents an operation that mutates the LoginSession nodes in the graph.
type LoginSessionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	last_login_time *time.Time
	clearedFields   map[string]struct{}
	owner           *int
	clearedowner    bool
	done            bool
	oldValue        func(context.Context) (*LoginSession, error)
	predicates      []predicate.LoginSession
}

var _ ent.Mutation = (*LoginSessionMutation)(nil)

// loginsessionOption allows management of the mutation configuration using functional options.
type loginsessionOption func(*LoginSessionMutation)

// newLoginSessionMutation creates new mutation for the LoginSession entity.
func newLoginSessionMutation(c config, op Op, opts ...loginsessionOption) *LoginSessionMutation {
	m := &LoginSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeLoginSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoginSessionID sets the ID field of the mutation.
func withLoginSessionID(id int) loginsessionOption {
	return func(m *LoginSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *LoginSession
		)
		m.oldValue = func(ctx context.Context) (*LoginSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LoginSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLoginSession sets the old LoginSession of the mutation.
func withLoginSession(node *LoginSession) loginsessionOption {
	return func(m *LoginSessionMutation) {
		m.oldValue = func(context.Context) (*LoginSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoginSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoginSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entgenerated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LoginSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LoginSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LoginSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerID sets the "owner_id" field.
func (m *LoginSessionMutation) SetOwnerID(i int) {
	m.owner = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *LoginSessionMutation) OwnerID() (r int, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the LoginSession entity.
// If the LoginSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginSessionMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *LoginSessionMutation) ResetOwnerID() {
	m.owner = nil
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *LoginSessionMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *LoginSessionMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the LoginSession entity.
// If the LoginSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoginSessionMutation) OldLastLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *LoginSessionMutation) ResetLastLoginTime() {
	m.last_login_time = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *LoginSessionMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[loginsession.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *LoginSessionMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *LoginSessionMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *LoginSessionMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the LoginSessionMutation builder.
func (m *LoginSessionMutation) Where(ps ...predicate.LoginSession) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LoginSessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LoginSessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LoginSession, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LoginSessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LoginSessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LoginSession).
func (m *LoginSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoginSessionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.owner != nil {
		fields = append(fields, loginsession.FieldOwnerID)
	}
	if m.last_login_time != nil {
		fields = append(fields, loginsession.FieldLastLoginTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoginSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case loginsession.FieldOwnerID:
		return m.OwnerID()
	case loginsession.FieldLastLoginTime:
		return m.LastLoginTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoginSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case loginsession.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case loginsession.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	}
	return nil, fmt.Errorf("unknown LoginSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case loginsession.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case loginsession.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	}
	return fmt.Errorf("unknown LoginSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoginSessionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoginSessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoginSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LoginSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoginSessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoginSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoginSessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LoginSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoginSessionMutation) ResetField(name string) error {
	switch name {
	case loginsession.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case loginsession.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	}
	return fmt.Errorf("unknown LoginSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoginSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, loginsession.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoginSessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case loginsession.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoginSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoginSessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoginSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, loginsession.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoginSessionMutation) EdgeCleared(name string) bool {
	switch name {
	case loginsession.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoginSessionMutation) ClearEdge(name string) error {
	switch name {
	case loginsession.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown LoginSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoginSessionMutation) ResetEdge(name string) error {
	switch name {
	case loginsession.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown LoginSession edge %s", name)
}

// SuperuserProfileMutation represents an operation that mutates the SuperuserProfile nodes in the graph.
type SuperuserProfileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	owner         *int
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*SuperuserProfile, error)
	predicates    []predicate.SuperuserProfile
}

var _ ent.Mutation = (*SuperuserProfileMutation)(nil)

// superuserprofileOption allows management of the mutation configuration using functional options.
type superuserprofileOption func(*SuperuserProfileMutation)

// newSuperuserProfileMutation creates new mutation for the SuperuserProfile entity.
func newSuperuserProfileMutation(c config, op Op, opts ...superuserprofileOption) *SuperuserProfileMutation {
	m := &SuperuserProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeSuperuserProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSuperuserProfileID sets the ID field of the mutation.
func withSuperuserProfileID(id int) superuserprofileOption {
	return func(m *SuperuserProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *SuperuserProfile
		)
		m.oldValue = func(ctx context.Context) (*SuperuserProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SuperuserProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSuperuserProfile sets the old SuperuserProfile of the mutation.
func withSuperuserProfile(node *SuperuserProfile) superuserprofileOption {
	return func(m *SuperuserProfileMutation) {
		m.oldValue = func(context.Context) (*SuperuserProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SuperuserProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SuperuserProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entgenerated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SuperuserProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SuperuserProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SuperuserProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerID sets the "owner_id" field.
func (m *SuperuserProfileMutation) SetOwnerID(i int) {
	m.owner = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *SuperuserProfileMutation) OwnerID() (r int, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the SuperuserProfile entity.
// If the SuperuserProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SuperuserProfileMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *SuperuserProfileMutation) ResetOwnerID() {
	m.owner = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *SuperuserProfileMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[superuserprofile.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *SuperuserProfileMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *SuperuserProfileMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *SuperuserProfileMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the SuperuserProfileMutation builder.
func (m *SuperuserProfileMutation) Where(ps ...predicate.SuperuserProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SuperuserProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SuperuserProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SuperuserProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SuperuserProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SuperuserProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SuperuserProfile).
func (m *SuperuserProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SuperuserProfileMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.owner != nil {
		fields = append(fields, superuserprofile.FieldOwnerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SuperuserProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case superuserprofile.FieldOwnerID:
		return m.OwnerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SuperuserProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case superuserprofile.FieldOwnerID:
		return m.OldOwnerID(ctx)
	}
	return nil, fmt.Errorf("unknown SuperuserProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SuperuserProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case superuserprofile.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	}
	return fmt.Errorf("unknown SuperuserProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SuperuserProfileMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SuperuserProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SuperuserProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SuperuserProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SuperuserProfileMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SuperuserProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SuperuserProfileMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SuperuserProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SuperuserProfileMutation) ResetField(name string) error {
	switch name {
	case superuserprofile.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	}
	return fmt.Errorf("unknown SuperuserProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SuperuserProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, superuserprofile.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SuperuserProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case superuserprofile.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SuperuserProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SuperuserProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SuperuserProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, superuserprofile.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SuperuserProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case superuserprofile.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SuperuserProfileMutation) ClearEdge(name string) error {
	switch name {
	case superuserprofile.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown SuperuserProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SuperuserProfileMutation) ResetEdge(name string) error {
	switch name {
	case superuserprofile.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown SuperuserProfile edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	clearedFields            map[string]struct{}
	superuser_profile        *int
	clearedsuperuser_profile bool
	email_credential         *int
	clearedemail_credential  bool
	login_sessions           map[int]struct{}
	removedlogin_sessions    map[int]struct{}
	clearedlogin_sessions    bool
	public_profile           *int
	clearedpublic_profile    bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entgenerated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSuperuserProfileID sets the "superuser_profile" edge to the SuperuserProfile entity by id.
func (m *UserMutation) SetSuperuserProfileID(id int) {
	m.superuser_profile = &id
}

// ClearSuperuserProfile clears the "superuser_profile" edge to the SuperuserProfile entity.
func (m *UserMutation) ClearSuperuserProfile() {
	m.clearedsuperuser_profile = true
}

// SuperuserProfileCleared reports if the "superuser_profile" edge to the SuperuserProfile entity was cleared.
func (m *UserMutation) SuperuserProfileCleared() bool {
	return m.clearedsuperuser_profile
}

// SuperuserProfileID returns the "superuser_profile" edge ID in the mutation.
func (m *UserMutation) SuperuserProfileID() (id int, exists bool) {
	if m.superuser_profile != nil {
		return *m.superuser_profile, true
	}
	return
}

// SuperuserProfileIDs returns the "superuser_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SuperuserProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SuperuserProfileIDs() (ids []int) {
	if id := m.superuser_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSuperuserProfile resets all changes to the "superuser_profile" edge.
func (m *UserMutation) ResetSuperuserProfile() {
	m.superuser_profile = nil
	m.clearedsuperuser_profile = false
}

// SetEmailCredentialID sets the "email_credential" edge to the EmailCredential entity by id.
func (m *UserMutation) SetEmailCredentialID(id int) {
	m.email_credential = &id
}

// ClearEmailCredential clears the "email_credential" edge to the EmailCredential entity.
func (m *UserMutation) ClearEmailCredential() {
	m.clearedemail_credential = true
}

// EmailCredentialCleared reports if the "email_credential" edge to the EmailCredential entity was cleared.
func (m *UserMutation) EmailCredentialCleared() bool {
	return m.clearedemail_credential
}

// EmailCredentialID returns the "email_credential" edge ID in the mutation.
func (m *UserMutation) EmailCredentialID() (id int, exists bool) {
	if m.email_credential != nil {
		return *m.email_credential, true
	}
	return
}

// EmailCredentialIDs returns the "email_credential" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmailCredentialID instead. It exists only for internal usage by the builders.
func (m *UserMutation) EmailCredentialIDs() (ids []int) {
	if id := m.email_credential; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmailCredential resets all changes to the "email_credential" edge.
func (m *UserMutation) ResetEmailCredential() {
	m.email_credential = nil
	m.clearedemail_credential = false
}

// AddLoginSessionIDs adds the "login_sessions" edge to the LoginSession entity by ids.
func (m *UserMutation) AddLoginSessionIDs(ids ...int) {
	if m.login_sessions == nil {
		m.login_sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.login_sessions[ids[i]] = struct{}{}
	}
}

// ClearLoginSessions clears the "login_sessions" edge to the LoginSession entity.
func (m *UserMutation) ClearLoginSessions() {
	m.clearedlogin_sessions = true
}

// LoginSessionsCleared reports if the "login_sessions" edge to the LoginSession entity was cleared.
func (m *UserMutation) LoginSessionsCleared() bool {
	return m.clearedlogin_sessions
}

// RemoveLoginSessionIDs removes the "login_sessions" edge to the LoginSession entity by IDs.
func (m *UserMutation) RemoveLoginSessionIDs(ids ...int) {
	if m.removedlogin_sessions == nil {
		m.removedlogin_sessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.login_sessions, ids[i])
		m.removedlogin_sessions[ids[i]] = struct{}{}
	}
}

// RemovedLoginSessions returns the removed IDs of the "login_sessions" edge to the LoginSession entity.
func (m *UserMutation) RemovedLoginSessionsIDs() (ids []int) {
	for id := range m.removedlogin_sessions {
		ids = append(ids, id)
	}
	return
}

// LoginSessionsIDs returns the "login_sessions" edge IDs in the mutation.
func (m *UserMutation) LoginSessionsIDs() (ids []int) {
	for id := range m.login_sessions {
		ids = append(ids, id)
	}
	return
}

// ResetLoginSessions resets all changes to the "login_sessions" edge.
func (m *UserMutation) ResetLoginSessions() {
	m.login_sessions = nil
	m.clearedlogin_sessions = false
	m.removedlogin_sessions = nil
}

// SetPublicProfileID sets the "public_profile" edge to the UserPublicProfile entity by id.
func (m *UserMutation) SetPublicProfileID(id int) {
	m.public_profile = &id
}

// ClearPublicProfile clears the "public_profile" edge to the UserPublicProfile entity.
func (m *UserMutation) ClearPublicProfile() {
	m.clearedpublic_profile = true
}

// PublicProfileCleared reports if the "public_profile" edge to the UserPublicProfile entity was cleared.
func (m *UserMutation) PublicProfileCleared() bool {
	return m.clearedpublic_profile
}

// PublicProfileID returns the "public_profile" edge ID in the mutation.
func (m *UserMutation) PublicProfileID() (id int, exists bool) {
	if m.public_profile != nil {
		return *m.public_profile, true
	}
	return
}

// PublicProfileIDs returns the "public_profile" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PublicProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) PublicProfileIDs() (ids []int) {
	if id := m.public_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPublicProfile resets all changes to the "public_profile" edge.
func (m *UserMutation) ResetPublicProfile() {
	m.public_profile = nil
	m.clearedpublic_profile = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.superuser_profile != nil {
		edges = append(edges, user.EdgeSuperuserProfile)
	}
	if m.email_credential != nil {
		edges = append(edges, user.EdgeEmailCredential)
	}
	if m.login_sessions != nil {
		edges = append(edges, user.EdgeLoginSessions)
	}
	if m.public_profile != nil {
		edges = append(edges, user.EdgePublicProfile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSuperuserProfile:
		if id := m.superuser_profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeEmailCredential:
		if id := m.email_credential; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeLoginSessions:
		ids := make([]ent.Value, 0, len(m.login_sessions))
		for id := range m.login_sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePublicProfile:
		if id := m.public_profile; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedlogin_sessions != nil {
		edges = append(edges, user.EdgeLoginSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeLoginSessions:
		ids := make([]ent.Value, 0, len(m.removedlogin_sessions))
		for id := range m.removedlogin_sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedsuperuser_profile {
		edges = append(edges, user.EdgeSuperuserProfile)
	}
	if m.clearedemail_credential {
		edges = append(edges, user.EdgeEmailCredential)
	}
	if m.clearedlogin_sessions {
		edges = append(edges, user.EdgeLoginSessions)
	}
	if m.clearedpublic_profile {
		edges = append(edges, user.EdgePublicProfile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSuperuserProfile:
		return m.clearedsuperuser_profile
	case user.EdgeEmailCredential:
		return m.clearedemail_credential
	case user.EdgeLoginSessions:
		return m.clearedlogin_sessions
	case user.EdgePublicProfile:
		return m.clearedpublic_profile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSuperuserProfile:
		m.ClearSuperuserProfile()
		return nil
	case user.EdgeEmailCredential:
		m.ClearEmailCredential()
		return nil
	case user.EdgePublicProfile:
		m.ClearPublicProfile()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSuperuserProfile:
		m.ResetSuperuserProfile()
		return nil
	case user.EdgeEmailCredential:
		m.ResetEmailCredential()
		return nil
	case user.EdgeLoginSessions:
		m.ResetLoginSessions()
		return nil
	case user.EdgePublicProfile:
		m.ResetPublicProfile()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPublicProfileMutation represents an operation that mutates the UserPublicProfile nodes in the graph.
type UserPublicProfileMutation struct {
	config
	op             Op
	typ            string
	id             *int
	handle_name    *string
	photo_blob_key *string
	clearedFields  map[string]struct{}
	owner          *int
	clearedowner   bool
	done           bool
	oldValue       func(context.Context) (*UserPublicProfile, error)
	predicates     []predicate.UserPublicProfile
}

var _ ent.Mutation = (*UserPublicProfileMutation)(nil)

// userpublicprofileOption allows management of the mutation configuration using functional options.
type userpublicprofileOption func(*UserPublicProfileMutation)

// newUserPublicProfileMutation creates new mutation for the UserPublicProfile entity.
func newUserPublicProfileMutation(c config, op Op, opts ...userpublicprofileOption) *UserPublicProfileMutation {
	m := &UserPublicProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPublicProfile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPublicProfileID sets the ID field of the mutation.
func withUserPublicProfileID(id int) userpublicprofileOption {
	return func(m *UserPublicProfileMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPublicProfile
		)
		m.oldValue = func(ctx context.Context) (*UserPublicProfile, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPublicProfile.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPublicProfile sets the old UserPublicProfile of the mutation.
func withUserPublicProfile(node *UserPublicProfile) userpublicprofileOption {
	return func(m *UserPublicProfileMutation) {
		m.oldValue = func(context.Context) (*UserPublicProfile, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPublicProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPublicProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entgenerated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPublicProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserPublicProfileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserPublicProfile.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerID sets the "owner_id" field.
func (m *UserPublicProfileMutation) SetOwnerID(i int) {
	m.owner = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *UserPublicProfileMutation) OwnerID() (r int, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the UserPublicProfile entity.
// If the UserPublicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPublicProfileMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *UserPublicProfileMutation) ResetOwnerID() {
	m.owner = nil
}

// SetHandleName sets the "handle_name" field.
func (m *UserPublicProfileMutation) SetHandleName(s string) {
	m.handle_name = &s
}

// HandleName returns the value of the "handle_name" field in the mutation.
func (m *UserPublicProfileMutation) HandleName() (r string, exists bool) {
	v := m.handle_name
	if v == nil {
		return
	}
	return *v, true
}

// OldHandleName returns the old "handle_name" field's value of the UserPublicProfile entity.
// If the UserPublicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPublicProfileMutation) OldHandleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHandleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHandleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandleName: %w", err)
	}
	return oldValue.HandleName, nil
}

// ResetHandleName resets all changes to the "handle_name" field.
func (m *UserPublicProfileMutation) ResetHandleName() {
	m.handle_name = nil
}

// SetPhotoBlobKey sets the "photo_blob_key" field.
func (m *UserPublicProfileMutation) SetPhotoBlobKey(s string) {
	m.photo_blob_key = &s
}

// PhotoBlobKey returns the value of the "photo_blob_key" field in the mutation.
func (m *UserPublicProfileMutation) PhotoBlobKey() (r string, exists bool) {
	v := m.photo_blob_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoBlobKey returns the old "photo_blob_key" field's value of the UserPublicProfile entity.
// If the UserPublicProfile object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPublicProfileMutation) OldPhotoBlobKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoBlobKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoBlobKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoBlobKey: %w", err)
	}
	return oldValue.PhotoBlobKey, nil
}

// ClearPhotoBlobKey clears the value of the "photo_blob_key" field.
func (m *UserPublicProfileMutation) ClearPhotoBlobKey() {
	m.photo_blob_key = nil
	m.clearedFields[userpublicprofile.FieldPhotoBlobKey] = struct{}{}
}

// PhotoBlobKeyCleared returns if the "photo_blob_key" field was cleared in this mutation.
func (m *UserPublicProfileMutation) PhotoBlobKeyCleared() bool {
	_, ok := m.clearedFields[userpublicprofile.FieldPhotoBlobKey]
	return ok
}

// ResetPhotoBlobKey resets all changes to the "photo_blob_key" field.
func (m *UserPublicProfileMutation) ResetPhotoBlobKey() {
	m.photo_blob_key = nil
	delete(m.clearedFields, userpublicprofile.FieldPhotoBlobKey)
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *UserPublicProfileMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[userpublicprofile.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *UserPublicProfileMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *UserPublicProfileMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *UserPublicProfileMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the UserPublicProfileMutation builder.
func (m *UserPublicProfileMutation) Where(ps ...predicate.UserPublicProfile) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPublicProfileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPublicProfileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPublicProfile, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPublicProfileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPublicProfileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPublicProfile).
func (m *UserPublicProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPublicProfileMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.owner != nil {
		fields = append(fields, userpublicprofile.FieldOwnerID)
	}
	if m.handle_name != nil {
		fields = append(fields, userpublicprofile.FieldHandleName)
	}
	if m.photo_blob_key != nil {
		fields = append(fields, userpublicprofile.FieldPhotoBlobKey)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPublicProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpublicprofile.FieldOwnerID:
		return m.OwnerID()
	case userpublicprofile.FieldHandleName:
		return m.HandleName()
	case userpublicprofile.FieldPhotoBlobKey:
		return m.PhotoBlobKey()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPublicProfileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userpublicprofile.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case userpublicprofile.FieldHandleName:
		return m.OldHandleName(ctx)
	case userpublicprofile.FieldPhotoBlobKey:
		return m.OldPhotoBlobKey(ctx)
	}
	return nil, fmt.Errorf("unknown UserPublicProfile field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPublicProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpublicprofile.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case userpublicprofile.FieldHandleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandleName(v)
		return nil
	case userpublicprofile.FieldPhotoBlobKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoBlobKey(v)
		return nil
	}
	return fmt.Errorf("unknown UserPublicProfile field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPublicProfileMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPublicProfileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPublicProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserPublicProfile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPublicProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userpublicprofile.FieldPhotoBlobKey) {
		fields = append(fields, userpublicprofile.FieldPhotoBlobKey)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPublicProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPublicProfileMutation) ClearField(name string) error {
	switch name {
	case userpublicprofile.FieldPhotoBlobKey:
		m.ClearPhotoBlobKey()
		return nil
	}
	return fmt.Errorf("unknown UserPublicProfile nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPublicProfileMutation) ResetField(name string) error {
	switch name {
	case userpublicprofile.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case userpublicprofile.FieldHandleName:
		m.ResetHandleName()
		return nil
	case userpublicprofile.FieldPhotoBlobKey:
		m.ResetPhotoBlobKey()
		return nil
	}
	return fmt.Errorf("unknown UserPublicProfile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPublicProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, userpublicprofile.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPublicProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userpublicprofile.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPublicProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPublicProfileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPublicProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, userpublicprofile.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPublicProfileMutation) EdgeCleared(name string) bool {
	switch name {
	case userpublicprofile.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPublicProfileMutation) ClearEdge(name string) error {
	switch name {
	case userpublicprofile.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown UserPublicProfile unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPublicProfileMutation) ResetEdge(name string) error {
	switch name {
	case userpublicprofile.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown UserPublicProfile edge %s", name)
}
