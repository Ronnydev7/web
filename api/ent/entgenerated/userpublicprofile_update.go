// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"api/ent/entgenerated/predicate"
	"api/ent/entgenerated/user"
	"api/ent/entgenerated/userpublicprofile"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPublicProfileUpdate is the builder for updating UserPublicProfile entities.
type UserPublicProfileUpdate struct {
	config
	hooks    []Hook
	mutation *UserPublicProfileMutation
}

// Where appends a list predicates to the UserPublicProfileUpdate builder.
func (uppu *UserPublicProfileUpdate) Where(ps ...predicate.UserPublicProfile) *UserPublicProfileUpdate {
	uppu.mutation.Where(ps...)
	return uppu
}

// SetOwnerID sets the "owner_id" field.
func (uppu *UserPublicProfileUpdate) SetOwnerID(i int) *UserPublicProfileUpdate {
	uppu.mutation.SetOwnerID(i)
	return uppu
}

// SetHandleName sets the "handle_name" field.
func (uppu *UserPublicProfileUpdate) SetHandleName(s string) *UserPublicProfileUpdate {
	uppu.mutation.SetHandleName(s)
	return uppu
}

// SetPhotoBlobKey sets the "photo_blob_key" field.
func (uppu *UserPublicProfileUpdate) SetPhotoBlobKey(s string) *UserPublicProfileUpdate {
	uppu.mutation.SetPhotoBlobKey(s)
	return uppu
}

// SetNillablePhotoBlobKey sets the "photo_blob_key" field if the given value is not nil.
func (uppu *UserPublicProfileUpdate) SetNillablePhotoBlobKey(s *string) *UserPublicProfileUpdate {
	if s != nil {
		uppu.SetPhotoBlobKey(*s)
	}
	return uppu
}

// ClearPhotoBlobKey clears the value of the "photo_blob_key" field.
func (uppu *UserPublicProfileUpdate) ClearPhotoBlobKey() *UserPublicProfileUpdate {
	uppu.mutation.ClearPhotoBlobKey()
	return uppu
}

// SetOwner sets the "owner" edge to the User entity.
func (uppu *UserPublicProfileUpdate) SetOwner(u *User) *UserPublicProfileUpdate {
	return uppu.SetOwnerID(u.ID)
}

// Mutation returns the UserPublicProfileMutation object of the builder.
func (uppu *UserPublicProfileUpdate) Mutation() *UserPublicProfileMutation {
	return uppu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uppu *UserPublicProfileUpdate) ClearOwner() *UserPublicProfileUpdate {
	uppu.mutation.ClearOwner()
	return uppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uppu *UserPublicProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uppu.sqlSave, uppu.mutation, uppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uppu *UserPublicProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := uppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uppu *UserPublicProfileUpdate) Exec(ctx context.Context) error {
	_, err := uppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uppu *UserPublicProfileUpdate) ExecX(ctx context.Context) {
	if err := uppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uppu *UserPublicProfileUpdate) check() error {
	if _, ok := uppu.mutation.OwnerID(); uppu.mutation.OwnerCleared() && !ok {
		return errors.New(`entgenerated: clearing a required unique edge "UserPublicProfile.owner"`)
	}
	return nil
}

func (uppu *UserPublicProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpublicprofile.Table, userpublicprofile.Columns, sqlgraph.NewFieldSpec(userpublicprofile.FieldID, field.TypeInt))
	if ps := uppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uppu.mutation.HandleName(); ok {
		_spec.SetField(userpublicprofile.FieldHandleName, field.TypeString, value)
	}
	if value, ok := uppu.mutation.PhotoBlobKey(); ok {
		_spec.SetField(userpublicprofile.FieldPhotoBlobKey, field.TypeString, value)
	}
	if uppu.mutation.PhotoBlobKeyCleared() {
		_spec.ClearField(userpublicprofile.FieldPhotoBlobKey, field.TypeString)
	}
	if uppu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpublicprofile.OwnerTable,
			Columns: []string{userpublicprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uppu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpublicprofile.OwnerTable,
			Columns: []string{userpublicprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpublicprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uppu.mutation.done = true
	return n, nil
}

// UserPublicProfileUpdateOne is the builder for updating a single UserPublicProfile entity.
type UserPublicProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPublicProfileMutation
}

// SetOwnerID sets the "owner_id" field.
func (uppuo *UserPublicProfileUpdateOne) SetOwnerID(i int) *UserPublicProfileUpdateOne {
	uppuo.mutation.SetOwnerID(i)
	return uppuo
}

// SetHandleName sets the "handle_name" field.
func (uppuo *UserPublicProfileUpdateOne) SetHandleName(s string) *UserPublicProfileUpdateOne {
	uppuo.mutation.SetHandleName(s)
	return uppuo
}

// SetPhotoBlobKey sets the "photo_blob_key" field.
func (uppuo *UserPublicProfileUpdateOne) SetPhotoBlobKey(s string) *UserPublicProfileUpdateOne {
	uppuo.mutation.SetPhotoBlobKey(s)
	return uppuo
}

// SetNillablePhotoBlobKey sets the "photo_blob_key" field if the given value is not nil.
func (uppuo *UserPublicProfileUpdateOne) SetNillablePhotoBlobKey(s *string) *UserPublicProfileUpdateOne {
	if s != nil {
		uppuo.SetPhotoBlobKey(*s)
	}
	return uppuo
}

// ClearPhotoBlobKey clears the value of the "photo_blob_key" field.
func (uppuo *UserPublicProfileUpdateOne) ClearPhotoBlobKey() *UserPublicProfileUpdateOne {
	uppuo.mutation.ClearPhotoBlobKey()
	return uppuo
}

// SetOwner sets the "owner" edge to the User entity.
func (uppuo *UserPublicProfileUpdateOne) SetOwner(u *User) *UserPublicProfileUpdateOne {
	return uppuo.SetOwnerID(u.ID)
}

// Mutation returns the UserPublicProfileMutation object of the builder.
func (uppuo *UserPublicProfileUpdateOne) Mutation() *UserPublicProfileMutation {
	return uppuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (uppuo *UserPublicProfileUpdateOne) ClearOwner() *UserPublicProfileUpdateOne {
	uppuo.mutation.ClearOwner()
	return uppuo
}

// Where appends a list predicates to the UserPublicProfileUpdate builder.
func (uppuo *UserPublicProfileUpdateOne) Where(ps ...predicate.UserPublicProfile) *UserPublicProfileUpdateOne {
	uppuo.mutation.Where(ps...)
	return uppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uppuo *UserPublicProfileUpdateOne) Select(field string, fields ...string) *UserPublicProfileUpdateOne {
	uppuo.fields = append([]string{field}, fields...)
	return uppuo
}

// Save executes the query and returns the updated UserPublicProfile entity.
func (uppuo *UserPublicProfileUpdateOne) Save(ctx context.Context) (*UserPublicProfile, error) {
	return withHooks(ctx, uppuo.sqlSave, uppuo.mutation, uppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uppuo *UserPublicProfileUpdateOne) SaveX(ctx context.Context) *UserPublicProfile {
	node, err := uppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uppuo *UserPublicProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := uppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uppuo *UserPublicProfileUpdateOne) ExecX(ctx context.Context) {
	if err := uppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uppuo *UserPublicProfileUpdateOne) check() error {
	if _, ok := uppuo.mutation.OwnerID(); uppuo.mutation.OwnerCleared() && !ok {
		return errors.New(`entgenerated: clearing a required unique edge "UserPublicProfile.owner"`)
	}
	return nil
}

func (uppuo *UserPublicProfileUpdateOne) sqlSave(ctx context.Context) (_node *UserPublicProfile, err error) {
	if err := uppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpublicprofile.Table, userpublicprofile.Columns, sqlgraph.NewFieldSpec(userpublicprofile.FieldID, field.TypeInt))
	id, ok := uppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgenerated: missing "UserPublicProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpublicprofile.FieldID)
		for _, f := range fields {
			if !userpublicprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgenerated: invalid field %q for query", f)}
			}
			if f != userpublicprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uppuo.mutation.HandleName(); ok {
		_spec.SetField(userpublicprofile.FieldHandleName, field.TypeString, value)
	}
	if value, ok := uppuo.mutation.PhotoBlobKey(); ok {
		_spec.SetField(userpublicprofile.FieldPhotoBlobKey, field.TypeString, value)
	}
	if uppuo.mutation.PhotoBlobKeyCleared() {
		_spec.ClearField(userpublicprofile.FieldPhotoBlobKey, field.TypeString)
	}
	if uppuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpublicprofile.OwnerTable,
			Columns: []string{userpublicprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uppuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpublicprofile.OwnerTable,
			Columns: []string{userpublicprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPublicProfile{config: uppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpublicprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uppuo.mutation.done = true
	return _node, nil
}
