// Code generated by ent, DO NOT EDIT.

package userpublicprofile

import (
	"api/ent/entgenerated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldOwnerID, v))
}

// HandleName applies equality check predicate on the "handle_name" field. It's identical to HandleNameEQ.
func HandleName(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldHandleName, v))
}

// PhotoBlobKey applies equality check predicate on the "photo_blob_key" field. It's identical to PhotoBlobKeyEQ.
func PhotoBlobKey(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldPhotoBlobKey, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNotIn(FieldOwnerID, vs...))
}

// HandleNameEQ applies the EQ predicate on the "handle_name" field.
func HandleNameEQ(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldHandleName, v))
}

// HandleNameNEQ applies the NEQ predicate on the "handle_name" field.
func HandleNameNEQ(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNEQ(FieldHandleName, v))
}

// HandleNameIn applies the In predicate on the "handle_name" field.
func HandleNameIn(vs ...string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldIn(FieldHandleName, vs...))
}

// HandleNameNotIn applies the NotIn predicate on the "handle_name" field.
func HandleNameNotIn(vs ...string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNotIn(FieldHandleName, vs...))
}

// HandleNameGT applies the GT predicate on the "handle_name" field.
func HandleNameGT(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldGT(FieldHandleName, v))
}

// HandleNameGTE applies the GTE predicate on the "handle_name" field.
func HandleNameGTE(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldGTE(FieldHandleName, v))
}

// HandleNameLT applies the LT predicate on the "handle_name" field.
func HandleNameLT(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldLT(FieldHandleName, v))
}

// HandleNameLTE applies the LTE predicate on the "handle_name" field.
func HandleNameLTE(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldLTE(FieldHandleName, v))
}

// HandleNameContains applies the Contains predicate on the "handle_name" field.
func HandleNameContains(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldContains(FieldHandleName, v))
}

// HandleNameHasPrefix applies the HasPrefix predicate on the "handle_name" field.
func HandleNameHasPrefix(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldHasPrefix(FieldHandleName, v))
}

// HandleNameHasSuffix applies the HasSuffix predicate on the "handle_name" field.
func HandleNameHasSuffix(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldHasSuffix(FieldHandleName, v))
}

// HandleNameEqualFold applies the EqualFold predicate on the "handle_name" field.
func HandleNameEqualFold(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEqualFold(FieldHandleName, v))
}

// HandleNameContainsFold applies the ContainsFold predicate on the "handle_name" field.
func HandleNameContainsFold(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldContainsFold(FieldHandleName, v))
}

// PhotoBlobKeyEQ applies the EQ predicate on the "photo_blob_key" field.
func PhotoBlobKeyEQ(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEQ(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyNEQ applies the NEQ predicate on the "photo_blob_key" field.
func PhotoBlobKeyNEQ(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNEQ(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyIn applies the In predicate on the "photo_blob_key" field.
func PhotoBlobKeyIn(vs ...string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldIn(FieldPhotoBlobKey, vs...))
}

// PhotoBlobKeyNotIn applies the NotIn predicate on the "photo_blob_key" field.
func PhotoBlobKeyNotIn(vs ...string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNotIn(FieldPhotoBlobKey, vs...))
}

// PhotoBlobKeyGT applies the GT predicate on the "photo_blob_key" field.
func PhotoBlobKeyGT(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldGT(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyGTE applies the GTE predicate on the "photo_blob_key" field.
func PhotoBlobKeyGTE(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldGTE(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyLT applies the LT predicate on the "photo_blob_key" field.
func PhotoBlobKeyLT(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldLT(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyLTE applies the LTE predicate on the "photo_blob_key" field.
func PhotoBlobKeyLTE(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldLTE(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyContains applies the Contains predicate on the "photo_blob_key" field.
func PhotoBlobKeyContains(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldContains(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyHasPrefix applies the HasPrefix predicate on the "photo_blob_key" field.
func PhotoBlobKeyHasPrefix(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldHasPrefix(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyHasSuffix applies the HasSuffix predicate on the "photo_blob_key" field.
func PhotoBlobKeyHasSuffix(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldHasSuffix(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyIsNil applies the IsNil predicate on the "photo_blob_key" field.
func PhotoBlobKeyIsNil() predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldIsNull(FieldPhotoBlobKey))
}

// PhotoBlobKeyNotNil applies the NotNil predicate on the "photo_blob_key" field.
func PhotoBlobKeyNotNil() predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldNotNull(FieldPhotoBlobKey))
}

// PhotoBlobKeyEqualFold applies the EqualFold predicate on the "photo_blob_key" field.
func PhotoBlobKeyEqualFold(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldEqualFold(FieldPhotoBlobKey, v))
}

// PhotoBlobKeyContainsFold applies the ContainsFold predicate on the "photo_blob_key" field.
func PhotoBlobKeyContainsFold(v string) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.FieldContainsFold(FieldPhotoBlobKey, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.UserPublicProfile {
	return predicate.UserPublicProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPublicProfile) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPublicProfile) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPublicProfile) predicate.UserPublicProfile {
	return predicate.UserPublicProfile(sql.NotPredicates(p))
}
