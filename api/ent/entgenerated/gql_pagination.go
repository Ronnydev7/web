// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"api/ent/entgenerated/emailcredential"
	"api/ent/entgenerated/loginsession"
	"api/ent/entgenerated/user"
	"api/ent/entgenerated/userpublicprofile"
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// EmailCredentialEdge is the edge representation of EmailCredential.
type EmailCredentialEdge struct {
	Node   *EmailCredential `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// EmailCredentialConnection is the connection containing edges to EmailCredential.
type EmailCredentialConnection struct {
	Edges      []*EmailCredentialEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *EmailCredentialConnection) build(nodes []*EmailCredential, pager *emailcredentialPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EmailCredential
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EmailCredential {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EmailCredential {
			return nodes[i]
		}
	}
	c.Edges = make([]*EmailCredentialEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EmailCredentialEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EmailCredentialPaginateOption enables pagination customization.
type EmailCredentialPaginateOption func(*emailcredentialPager) error

// WithEmailCredentialOrder configures pagination ordering.
func WithEmailCredentialOrder(order *EmailCredentialOrder) EmailCredentialPaginateOption {
	if order == nil {
		order = DefaultEmailCredentialOrder
	}
	o := *order
	return func(pager *emailcredentialPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEmailCredentialOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEmailCredentialFilter configures pagination filter.
func WithEmailCredentialFilter(filter func(*EmailCredentialQuery) (*EmailCredentialQuery, error)) EmailCredentialPaginateOption {
	return func(pager *emailcredentialPager) error {
		if filter == nil {
			return errors.New("EmailCredentialQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type emailcredentialPager struct {
	reverse bool
	order   *EmailCredentialOrder
	filter  func(*EmailCredentialQuery) (*EmailCredentialQuery, error)
}

func newEmailCredentialPager(opts []EmailCredentialPaginateOption, reverse bool) (*emailcredentialPager, error) {
	pager := &emailcredentialPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEmailCredentialOrder
	}
	return pager, nil
}

func (p *emailcredentialPager) applyFilter(query *EmailCredentialQuery) (*EmailCredentialQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *emailcredentialPager) toCursor(ec *EmailCredential) Cursor {
	return p.order.Field.toCursor(ec)
}

func (p *emailcredentialPager) applyCursors(query *EmailCredentialQuery, after, before *Cursor) (*EmailCredentialQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultEmailCredentialOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *emailcredentialPager) applyOrder(query *EmailCredentialQuery) *EmailCredentialQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultEmailCredentialOrder.Field {
		query = query.Order(DefaultEmailCredentialOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *emailcredentialPager) orderExpr(query *EmailCredentialQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEmailCredentialOrder.Field {
			b.Comma().Ident(DefaultEmailCredentialOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to EmailCredential.
func (ec *EmailCredentialQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EmailCredentialPaginateOption,
) (*EmailCredentialConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEmailCredentialPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ec, err = pager.applyFilter(ec); err != nil {
		return nil, err
	}
	conn := &EmailCredentialConnection{Edges: []*EmailCredentialEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ec.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ec, err = pager.applyCursors(ec, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ec.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ec.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ec = pager.applyOrder(ec)
	nodes, err := ec.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EmailCredentialOrderField defines the ordering field of EmailCredential.
type EmailCredentialOrderField struct {
	// Value extracts the ordering value from the given EmailCredential.
	Value    func(*EmailCredential) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) emailcredential.OrderOption
	toCursor func(*EmailCredential) Cursor
}

// EmailCredentialOrder defines the ordering of EmailCredential.
type EmailCredentialOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *EmailCredentialOrderField `json:"field"`
}

// DefaultEmailCredentialOrder is the default ordering of EmailCredential.
var DefaultEmailCredentialOrder = &EmailCredentialOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &EmailCredentialOrderField{
		Value: func(ec *EmailCredential) (ent.Value, error) {
			return ec.ID, nil
		},
		column: emailcredential.FieldID,
		toTerm: emailcredential.ByID,
		toCursor: func(ec *EmailCredential) Cursor {
			return Cursor{ID: ec.ID}
		},
	},
}

// ToEdge converts EmailCredential into EmailCredentialEdge.
func (ec *EmailCredential) ToEdge(order *EmailCredentialOrder) *EmailCredentialEdge {
	if order == nil {
		order = DefaultEmailCredentialOrder
	}
	return &EmailCredentialEdge{
		Node:   ec,
		Cursor: order.Field.toCursor(ec),
	}
}

// LoginSessionEdge is the edge representation of LoginSession.
type LoginSessionEdge struct {
	Node   *LoginSession `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// LoginSessionConnection is the connection containing edges to LoginSession.
type LoginSessionConnection struct {
	Edges      []*LoginSessionEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *LoginSessionConnection) build(nodes []*LoginSession, pager *loginsessionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *LoginSession
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *LoginSession {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *LoginSession {
			return nodes[i]
		}
	}
	c.Edges = make([]*LoginSessionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &LoginSessionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// LoginSessionPaginateOption enables pagination customization.
type LoginSessionPaginateOption func(*loginsessionPager) error

// WithLoginSessionOrder configures pagination ordering.
func WithLoginSessionOrder(order *LoginSessionOrder) LoginSessionPaginateOption {
	if order == nil {
		order = DefaultLoginSessionOrder
	}
	o := *order
	return func(pager *loginsessionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLoginSessionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLoginSessionFilter configures pagination filter.
func WithLoginSessionFilter(filter func(*LoginSessionQuery) (*LoginSessionQuery, error)) LoginSessionPaginateOption {
	return func(pager *loginsessionPager) error {
		if filter == nil {
			return errors.New("LoginSessionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type loginsessionPager struct {
	reverse bool
	order   *LoginSessionOrder
	filter  func(*LoginSessionQuery) (*LoginSessionQuery, error)
}

func newLoginSessionPager(opts []LoginSessionPaginateOption, reverse bool) (*loginsessionPager, error) {
	pager := &loginsessionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLoginSessionOrder
	}
	return pager, nil
}

func (p *loginsessionPager) applyFilter(query *LoginSessionQuery) (*LoginSessionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *loginsessionPager) toCursor(ls *LoginSession) Cursor {
	return p.order.Field.toCursor(ls)
}

func (p *loginsessionPager) applyCursors(query *LoginSessionQuery, after, before *Cursor) (*LoginSessionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultLoginSessionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *loginsessionPager) applyOrder(query *LoginSessionQuery) *LoginSessionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultLoginSessionOrder.Field {
		query = query.Order(DefaultLoginSessionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *loginsessionPager) orderExpr(query *LoginSessionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultLoginSessionOrder.Field {
			b.Comma().Ident(DefaultLoginSessionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to LoginSession.
func (ls *LoginSessionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LoginSessionPaginateOption,
) (*LoginSessionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLoginSessionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ls, err = pager.applyFilter(ls); err != nil {
		return nil, err
	}
	conn := &LoginSessionConnection{Edges: []*LoginSessionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ls.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ls, err = pager.applyCursors(ls, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ls.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ls.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ls = pager.applyOrder(ls)
	nodes, err := ls.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// LoginSessionOrderField defines the ordering field of LoginSession.
type LoginSessionOrderField struct {
	// Value extracts the ordering value from the given LoginSession.
	Value    func(*LoginSession) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) loginsession.OrderOption
	toCursor func(*LoginSession) Cursor
}

// LoginSessionOrder defines the ordering of LoginSession.
type LoginSessionOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *LoginSessionOrderField `json:"field"`
}

// DefaultLoginSessionOrder is the default ordering of LoginSession.
var DefaultLoginSessionOrder = &LoginSessionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &LoginSessionOrderField{
		Value: func(ls *LoginSession) (ent.Value, error) {
			return ls.ID, nil
		},
		column: loginsession.FieldID,
		toTerm: loginsession.ByID,
		toCursor: func(ls *LoginSession) Cursor {
			return Cursor{ID: ls.ID}
		},
	},
}

// ToEdge converts LoginSession into LoginSessionEdge.
func (ls *LoginSession) ToEdge(order *LoginSessionOrder) *LoginSessionEdge {
	if order == nil {
		order = DefaultLoginSessionOrder
	}
	return &LoginSessionEdge{
		Node:   ls,
		Cursor: order.Field.toCursor(ls),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserPublicProfileEdge is the edge representation of UserPublicProfile.
type UserPublicProfileEdge struct {
	Node   *UserPublicProfile `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// UserPublicProfileConnection is the connection containing edges to UserPublicProfile.
type UserPublicProfileConnection struct {
	Edges      []*UserPublicProfileEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *UserPublicProfileConnection) build(nodes []*UserPublicProfile, pager *userpublicprofilePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserPublicProfile
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserPublicProfile {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserPublicProfile {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserPublicProfileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserPublicProfileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPublicProfilePaginateOption enables pagination customization.
type UserPublicProfilePaginateOption func(*userpublicprofilePager) error

// WithUserPublicProfileOrder configures pagination ordering.
func WithUserPublicProfileOrder(order *UserPublicProfileOrder) UserPublicProfilePaginateOption {
	if order == nil {
		order = DefaultUserPublicProfileOrder
	}
	o := *order
	return func(pager *userpublicprofilePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserPublicProfileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserPublicProfileFilter configures pagination filter.
func WithUserPublicProfileFilter(filter func(*UserPublicProfileQuery) (*UserPublicProfileQuery, error)) UserPublicProfilePaginateOption {
	return func(pager *userpublicprofilePager) error {
		if filter == nil {
			return errors.New("UserPublicProfileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userpublicprofilePager struct {
	reverse bool
	order   *UserPublicProfileOrder
	filter  func(*UserPublicProfileQuery) (*UserPublicProfileQuery, error)
}

func newUserPublicProfilePager(opts []UserPublicProfilePaginateOption, reverse bool) (*userpublicprofilePager, error) {
	pager := &userpublicprofilePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserPublicProfileOrder
	}
	return pager, nil
}

func (p *userpublicprofilePager) applyFilter(query *UserPublicProfileQuery) (*UserPublicProfileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userpublicprofilePager) toCursor(upp *UserPublicProfile) Cursor {
	return p.order.Field.toCursor(upp)
}

func (p *userpublicprofilePager) applyCursors(query *UserPublicProfileQuery, after, before *Cursor) (*UserPublicProfileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserPublicProfileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userpublicprofilePager) applyOrder(query *UserPublicProfileQuery) *UserPublicProfileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserPublicProfileOrder.Field {
		query = query.Order(DefaultUserPublicProfileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userpublicprofilePager) orderExpr(query *UserPublicProfileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserPublicProfileOrder.Field {
			b.Comma().Ident(DefaultUserPublicProfileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserPublicProfile.
func (upp *UserPublicProfileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPublicProfilePaginateOption,
) (*UserPublicProfileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPublicProfilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if upp, err = pager.applyFilter(upp); err != nil {
		return nil, err
	}
	conn := &UserPublicProfileConnection{Edges: []*UserPublicProfileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = upp.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if upp, err = pager.applyCursors(upp, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		upp.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := upp.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	upp = pager.applyOrder(upp)
	nodes, err := upp.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserPublicProfileOrderField defines the ordering field of UserPublicProfile.
type UserPublicProfileOrderField struct {
	// Value extracts the ordering value from the given UserPublicProfile.
	Value    func(*UserPublicProfile) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) userpublicprofile.OrderOption
	toCursor func(*UserPublicProfile) Cursor
}

// UserPublicProfileOrder defines the ordering of UserPublicProfile.
type UserPublicProfileOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *UserPublicProfileOrderField `json:"field"`
}

// DefaultUserPublicProfileOrder is the default ordering of UserPublicProfile.
var DefaultUserPublicProfileOrder = &UserPublicProfileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserPublicProfileOrderField{
		Value: func(upp *UserPublicProfile) (ent.Value, error) {
			return upp.ID, nil
		},
		column: userpublicprofile.FieldID,
		toTerm: userpublicprofile.ByID,
		toCursor: func(upp *UserPublicProfile) Cursor {
			return Cursor{ID: upp.ID}
		},
	},
}

// ToEdge converts UserPublicProfile into UserPublicProfileEdge.
func (upp *UserPublicProfile) ToEdge(order *UserPublicProfileOrder) *UserPublicProfileEdge {
	if order == nil {
		order = DefaultUserPublicProfileOrder
	}
	return &UserPublicProfileEdge{
		Node:   upp,
		Cursor: order.Field.toCursor(upp),
	}
}
