// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"api/ent/entgenerated/superuserprofile"
	"api/ent/entgenerated/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SuperuserProfileCreate is the builder for creating a SuperuserProfile entity.
type SuperuserProfileCreate struct {
	config
	mutation *SuperuserProfileMutation
	hooks    []Hook
}

// SetOwnerID sets the "owner_id" field.
func (spc *SuperuserProfileCreate) SetOwnerID(i int) *SuperuserProfileCreate {
	spc.mutation.SetOwnerID(i)
	return spc
}

// SetOwner sets the "owner" edge to the User entity.
func (spc *SuperuserProfileCreate) SetOwner(u *User) *SuperuserProfileCreate {
	return spc.SetOwnerID(u.ID)
}

// Mutation returns the SuperuserProfileMutation object of the builder.
func (spc *SuperuserProfileCreate) Mutation() *SuperuserProfileMutation {
	return spc.mutation
}

// Save creates the SuperuserProfile in the database.
func (spc *SuperuserProfileCreate) Save(ctx context.Context) (*SuperuserProfile, error) {
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SuperuserProfileCreate) SaveX(ctx context.Context) *SuperuserProfile {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SuperuserProfileCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SuperuserProfileCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SuperuserProfileCreate) check() error {
	if _, ok := spc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`entgenerated: missing required field "SuperuserProfile.owner_id"`)}
	}
	if _, ok := spc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`entgenerated: missing required edge "SuperuserProfile.owner"`)}
	}
	return nil
}

func (spc *SuperuserProfileCreate) sqlSave(ctx context.Context) (*SuperuserProfile, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SuperuserProfileCreate) createSpec() (*SuperuserProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &SuperuserProfile{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(superuserprofile.Table, sqlgraph.NewFieldSpec(superuserprofile.FieldID, field.TypeInt))
	)
	if nodes := spc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   superuserprofile.OwnerTable,
			Columns: []string{superuserprofile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SuperuserProfileCreateBulk is the builder for creating many SuperuserProfile entities in bulk.
type SuperuserProfileCreateBulk struct {
	config
	err      error
	builders []*SuperuserProfileCreate
}

// Save creates the SuperuserProfile entities in the database.
func (spcb *SuperuserProfileCreateBulk) Save(ctx context.Context) ([]*SuperuserProfile, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SuperuserProfile, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SuperuserProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SuperuserProfileCreateBulk) SaveX(ctx context.Context) []*SuperuserProfile {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SuperuserProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SuperuserProfileCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
