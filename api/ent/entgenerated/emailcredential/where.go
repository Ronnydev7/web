// Code generated by ent, DO NOT EDIT.

package emailcredential

import (
	"api/ent/entgenerated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldLTE(FieldID, id))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldOwnerID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldPasswordHash, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNotIn(FieldOwnerID, vs...))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldContainsFold(FieldEmail, v))
}

// AlgorithmEQ applies the EQ predicate on the "algorithm" field.
func AlgorithmEQ(v Algorithm) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldAlgorithm, v))
}

// AlgorithmNEQ applies the NEQ predicate on the "algorithm" field.
func AlgorithmNEQ(v Algorithm) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNEQ(FieldAlgorithm, v))
}

// AlgorithmIn applies the In predicate on the "algorithm" field.
func AlgorithmIn(vs ...Algorithm) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldIn(FieldAlgorithm, vs...))
}

// AlgorithmNotIn applies the NotIn predicate on the "algorithm" field.
func AlgorithmNotIn(vs ...Algorithm) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNotIn(FieldAlgorithm, vs...))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...[]byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...[]byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v []byte) predicate.EmailCredential {
	return predicate.EmailCredential(sql.FieldLTE(FieldPasswordHash, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.EmailCredential {
	return predicate.EmailCredential(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.EmailCredential {
	return predicate.EmailCredential(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailCredential) predicate.EmailCredential {
	return predicate.EmailCredential(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailCredential) predicate.EmailCredential {
	return predicate.EmailCredential(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailCredential) predicate.EmailCredential {
	return predicate.EmailCredential(sql.NotPredicates(p))
}
