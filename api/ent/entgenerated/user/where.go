// Code generated by ent, DO NOT EDIT.

package user

import (
	"api/ent/entgenerated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// HasSuperuserProfile applies the HasEdge predicate on the "superuser_profile" edge.
func HasSuperuserProfile() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SuperuserProfileTable, SuperuserProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuperuserProfileWith applies the HasEdge predicate on the "superuser_profile" edge with a given conditions (other predicates).
func HasSuperuserProfileWith(preds ...predicate.SuperuserProfile) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSuperuserProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailCredential applies the HasEdge predicate on the "email_credential" edge.
func HasEmailCredential() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EmailCredentialTable, EmailCredentialColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailCredentialWith applies the HasEdge predicate on the "email_credential" edge with a given conditions (other predicates).
func HasEmailCredentialWith(preds ...predicate.EmailCredential) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newEmailCredentialStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLoginSessions applies the HasEdge predicate on the "login_sessions" edge.
func HasLoginSessions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LoginSessionsTable, LoginSessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLoginSessionsWith applies the HasEdge predicate on the "login_sessions" edge with a given conditions (other predicates).
func HasLoginSessionsWith(preds ...predicate.LoginSession) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newLoginSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPublicProfile applies the HasEdge predicate on the "public_profile" edge.
func HasPublicProfile() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PublicProfileTable, PublicProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPublicProfileWith applies the HasEdge predicate on the "public_profile" edge with a given conditions (other predicates).
func HasPublicProfileWith(preds ...predicate.UserPublicProfile) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPublicProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
