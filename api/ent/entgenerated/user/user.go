// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeSuperuserProfile holds the string denoting the superuser_profile edge name in mutations.
	EdgeSuperuserProfile = "superuser_profile"
	// EdgeEmailCredential holds the string denoting the email_credential edge name in mutations.
	EdgeEmailCredential = "email_credential"
	// EdgeLoginSessions holds the string denoting the login_sessions edge name in mutations.
	EdgeLoginSessions = "login_sessions"
	// EdgePublicProfile holds the string denoting the public_profile edge name in mutations.
	EdgePublicProfile = "public_profile"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SuperuserProfileTable is the table that holds the superuser_profile relation/edge.
	SuperuserProfileTable = "superuser_profiles"
	// SuperuserProfileInverseTable is the table name for the SuperuserProfile entity.
	// It exists in this package in order to avoid circular dependency with the "superuserprofile" package.
	SuperuserProfileInverseTable = "superuser_profiles"
	// SuperuserProfileColumn is the table column denoting the superuser_profile relation/edge.
	SuperuserProfileColumn = "owner_id"
	// EmailCredentialTable is the table that holds the email_credential relation/edge.
	EmailCredentialTable = "email_credentials"
	// EmailCredentialInverseTable is the table name for the EmailCredential entity.
	// It exists in this package in order to avoid circular dependency with the "emailcredential" package.
	EmailCredentialInverseTable = "email_credentials"
	// EmailCredentialColumn is the table column denoting the email_credential relation/edge.
	EmailCredentialColumn = "owner_id"
	// LoginSessionsTable is the table that holds the login_sessions relation/edge.
	LoginSessionsTable = "login_sessions"
	// LoginSessionsInverseTable is the table name for the LoginSession entity.
	// It exists in this package in order to avoid circular dependency with the "loginsession" package.
	LoginSessionsInverseTable = "login_sessions"
	// LoginSessionsColumn is the table column denoting the login_sessions relation/edge.
	LoginSessionsColumn = "owner_id"
	// PublicProfileTable is the table that holds the public_profile relation/edge.
	PublicProfileTable = "user_public_profiles"
	// PublicProfileInverseTable is the table name for the UserPublicProfile entity.
	// It exists in this package in order to avoid circular dependency with the "userpublicprofile" package.
	PublicProfileInverseTable = "user_public_profiles"
	// PublicProfileColumn is the table column denoting the public_profile relation/edge.
	PublicProfileColumn = "owner_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "api/ent/entgenerated/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySuperuserProfileField orders the results by superuser_profile field.
func BySuperuserProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuperuserProfileStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmailCredentialField orders the results by email_credential field.
func ByEmailCredentialField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailCredentialStep(), sql.OrderByField(field, opts...))
	}
}

// ByLoginSessionsCount orders the results by login_sessions count.
func ByLoginSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLoginSessionsStep(), opts...)
	}
}

// ByLoginSessions orders the results by login_sessions terms.
func ByLoginSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLoginSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPublicProfileField orders the results by public_profile field.
func ByPublicProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPublicProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newSuperuserProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuperuserProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SuperuserProfileTable, SuperuserProfileColumn),
	)
}
func newEmailCredentialStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailCredentialInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmailCredentialTable, EmailCredentialColumn),
	)
}
func newLoginSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LoginSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LoginSessionsTable, LoginSessionsColumn),
	)
}
func newPublicProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PublicProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PublicProfileTable, PublicProfileColumn),
	)
}
