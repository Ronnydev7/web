// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"api/ent/entgenerated/migrate"

	"api/ent/entgenerated/emailcredential"
	"api/ent/entgenerated/loginsession"
	"api/ent/entgenerated/superuserprofile"
	"api/ent/entgenerated/user"
	"api/ent/entgenerated/userpublicprofile"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EmailCredential is the client for interacting with the EmailCredential builders.
	EmailCredential *EmailCredentialClient
	// LoginSession is the client for interacting with the LoginSession builders.
	LoginSession *LoginSessionClient
	// SuperuserProfile is the client for interacting with the SuperuserProfile builders.
	SuperuserProfile *SuperuserProfileClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserPublicProfile is the client for interacting with the UserPublicProfile builders.
	UserPublicProfile *UserPublicProfileClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EmailCredential = NewEmailCredentialClient(c.config)
	c.LoginSession = NewLoginSessionClient(c.config)
	c.SuperuserProfile = NewSuperuserProfileClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserPublicProfile = NewUserPublicProfileClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("entgenerated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entgenerated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		EmailCredential:   NewEmailCredentialClient(cfg),
		LoginSession:      NewLoginSessionClient(cfg),
		SuperuserProfile:  NewSuperuserProfileClient(cfg),
		User:              NewUserClient(cfg),
		UserPublicProfile: NewUserPublicProfileClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		EmailCredential:   NewEmailCredentialClient(cfg),
		LoginSession:      NewLoginSessionClient(cfg),
		SuperuserProfile:  NewSuperuserProfileClient(cfg),
		User:              NewUserClient(cfg),
		UserPublicProfile: NewUserPublicProfileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EmailCredential.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.EmailCredential.Use(hooks...)
	c.LoginSession.Use(hooks...)
	c.SuperuserProfile.Use(hooks...)
	c.User.Use(hooks...)
	c.UserPublicProfile.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.EmailCredential.Intercept(interceptors...)
	c.LoginSession.Intercept(interceptors...)
	c.SuperuserProfile.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserPublicProfile.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EmailCredentialMutation:
		return c.EmailCredential.mutate(ctx, m)
	case *LoginSessionMutation:
		return c.LoginSession.mutate(ctx, m)
	case *SuperuserProfileMutation:
		return c.SuperuserProfile.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserPublicProfileMutation:
		return c.UserPublicProfile.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("entgenerated: unknown mutation type %T", m)
	}
}

// EmailCredentialClient is a client for the EmailCredential schema.
type EmailCredentialClient struct {
	config
}

// NewEmailCredentialClient returns a client for the EmailCredential from the given config.
func NewEmailCredentialClient(c config) *EmailCredentialClient {
	return &EmailCredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailcredential.Hooks(f(g(h())))`.
func (c *EmailCredentialClient) Use(hooks ...Hook) {
	c.hooks.EmailCredential = append(c.hooks.EmailCredential, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailcredential.Intercept(f(g(h())))`.
func (c *EmailCredentialClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailCredential = append(c.inters.EmailCredential, interceptors...)
}

// Create returns a builder for creating a EmailCredential entity.
func (c *EmailCredentialClient) Create() *EmailCredentialCreate {
	mutation := newEmailCredentialMutation(c.config, OpCreate)
	return &EmailCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailCredential entities.
func (c *EmailCredentialClient) CreateBulk(builders ...*EmailCredentialCreate) *EmailCredentialCreateBulk {
	return &EmailCredentialCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailCredentialClient) MapCreateBulk(slice any, setFunc func(*EmailCredentialCreate, int)) *EmailCredentialCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailCredentialCreateBulk{err: fmt.Errorf("calling to EmailCredentialClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailCredentialCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailCredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailCredential.
func (c *EmailCredentialClient) Update() *EmailCredentialUpdate {
	mutation := newEmailCredentialMutation(c.config, OpUpdate)
	return &EmailCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailCredentialClient) UpdateOne(ec *EmailCredential) *EmailCredentialUpdateOne {
	mutation := newEmailCredentialMutation(c.config, OpUpdateOne, withEmailCredential(ec))
	return &EmailCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailCredentialClient) UpdateOneID(id int) *EmailCredentialUpdateOne {
	mutation := newEmailCredentialMutation(c.config, OpUpdateOne, withEmailCredentialID(id))
	return &EmailCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailCredential.
func (c *EmailCredentialClient) Delete() *EmailCredentialDelete {
	mutation := newEmailCredentialMutation(c.config, OpDelete)
	return &EmailCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailCredentialClient) DeleteOne(ec *EmailCredential) *EmailCredentialDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailCredentialClient) DeleteOneID(id int) *EmailCredentialDeleteOne {
	builder := c.Delete().Where(emailcredential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailCredentialDeleteOne{builder}
}

// Query returns a query builder for EmailCredential.
func (c *EmailCredentialClient) Query() *EmailCredentialQuery {
	return &EmailCredentialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailCredential},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailCredential entity by its id.
func (c *EmailCredentialClient) Get(ctx context.Context, id int) (*EmailCredential, error) {
	return c.Query().Where(emailcredential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailCredentialClient) GetX(ctx context.Context, id int) *EmailCredential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a EmailCredential.
func (c *EmailCredentialClient) QueryOwner(ec *EmailCredential) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailcredential.Table, emailcredential.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, emailcredential.OwnerTable, emailcredential.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailCredentialClient) Hooks() []Hook {
	hooks := c.hooks.EmailCredential
	return append(hooks[:len(hooks):len(hooks)], emailcredential.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmailCredentialClient) Interceptors() []Interceptor {
	return c.inters.EmailCredential
}

func (c *EmailCredentialClient) mutate(ctx context.Context, m *EmailCredentialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgenerated: unknown EmailCredential mutation op: %q", m.Op())
	}
}

// LoginSessionClient is a client for the LoginSession schema.
type LoginSessionClient struct {
	config
}

// NewLoginSessionClient returns a client for the LoginSession from the given config.
func NewLoginSessionClient(c config) *LoginSessionClient {
	return &LoginSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loginsession.Hooks(f(g(h())))`.
func (c *LoginSessionClient) Use(hooks ...Hook) {
	c.hooks.LoginSession = append(c.hooks.LoginSession, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `loginsession.Intercept(f(g(h())))`.
func (c *LoginSessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.LoginSession = append(c.inters.LoginSession, interceptors...)
}

// Create returns a builder for creating a LoginSession entity.
func (c *LoginSessionClient) Create() *LoginSessionCreate {
	mutation := newLoginSessionMutation(c.config, OpCreate)
	return &LoginSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoginSession entities.
func (c *LoginSessionClient) CreateBulk(builders ...*LoginSessionCreate) *LoginSessionCreateBulk {
	return &LoginSessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LoginSessionClient) MapCreateBulk(slice any, setFunc func(*LoginSessionCreate, int)) *LoginSessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LoginSessionCreateBulk{err: fmt.Errorf("calling to LoginSessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LoginSessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LoginSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoginSession.
func (c *LoginSessionClient) Update() *LoginSessionUpdate {
	mutation := newLoginSessionMutation(c.config, OpUpdate)
	return &LoginSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginSessionClient) UpdateOne(ls *LoginSession) *LoginSessionUpdateOne {
	mutation := newLoginSessionMutation(c.config, OpUpdateOne, withLoginSession(ls))
	return &LoginSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginSessionClient) UpdateOneID(id int) *LoginSessionUpdateOne {
	mutation := newLoginSessionMutation(c.config, OpUpdateOne, withLoginSessionID(id))
	return &LoginSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoginSession.
func (c *LoginSessionClient) Delete() *LoginSessionDelete {
	mutation := newLoginSessionMutation(c.config, OpDelete)
	return &LoginSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginSessionClient) DeleteOne(ls *LoginSession) *LoginSessionDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginSessionClient) DeleteOneID(id int) *LoginSessionDeleteOne {
	builder := c.Delete().Where(loginsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginSessionDeleteOne{builder}
}

// Query returns a query builder for LoginSession.
func (c *LoginSessionClient) Query() *LoginSessionQuery {
	return &LoginSessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLoginSession},
		inters: c.Interceptors(),
	}
}

// Get returns a LoginSession entity by its id.
func (c *LoginSessionClient) Get(ctx context.Context, id int) (*LoginSession, error) {
	return c.Query().Where(loginsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginSessionClient) GetX(ctx context.Context, id int) *LoginSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a LoginSession.
func (c *LoginSessionClient) QueryOwner(ls *LoginSession) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(loginsession.Table, loginsession.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, loginsession.OwnerTable, loginsession.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LoginSessionClient) Hooks() []Hook {
	hooks := c.hooks.LoginSession
	return append(hooks[:len(hooks):len(hooks)], loginsession.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *LoginSessionClient) Interceptors() []Interceptor {
	return c.inters.LoginSession
}

func (c *LoginSessionClient) mutate(ctx context.Context, m *LoginSessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LoginSessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LoginSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LoginSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LoginSessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgenerated: unknown LoginSession mutation op: %q", m.Op())
	}
}

// SuperuserProfileClient is a client for the SuperuserProfile schema.
type SuperuserProfileClient struct {
	config
}

// NewSuperuserProfileClient returns a client for the SuperuserProfile from the given config.
func NewSuperuserProfileClient(c config) *SuperuserProfileClient {
	return &SuperuserProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `superuserprofile.Hooks(f(g(h())))`.
func (c *SuperuserProfileClient) Use(hooks ...Hook) {
	c.hooks.SuperuserProfile = append(c.hooks.SuperuserProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `superuserprofile.Intercept(f(g(h())))`.
func (c *SuperuserProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.SuperuserProfile = append(c.inters.SuperuserProfile, interceptors...)
}

// Create returns a builder for creating a SuperuserProfile entity.
func (c *SuperuserProfileClient) Create() *SuperuserProfileCreate {
	mutation := newSuperuserProfileMutation(c.config, OpCreate)
	return &SuperuserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SuperuserProfile entities.
func (c *SuperuserProfileClient) CreateBulk(builders ...*SuperuserProfileCreate) *SuperuserProfileCreateBulk {
	return &SuperuserProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SuperuserProfileClient) MapCreateBulk(slice any, setFunc func(*SuperuserProfileCreate, int)) *SuperuserProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SuperuserProfileCreateBulk{err: fmt.Errorf("calling to SuperuserProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SuperuserProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SuperuserProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SuperuserProfile.
func (c *SuperuserProfileClient) Update() *SuperuserProfileUpdate {
	mutation := newSuperuserProfileMutation(c.config, OpUpdate)
	return &SuperuserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SuperuserProfileClient) UpdateOne(sp *SuperuserProfile) *SuperuserProfileUpdateOne {
	mutation := newSuperuserProfileMutation(c.config, OpUpdateOne, withSuperuserProfile(sp))
	return &SuperuserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SuperuserProfileClient) UpdateOneID(id int) *SuperuserProfileUpdateOne {
	mutation := newSuperuserProfileMutation(c.config, OpUpdateOne, withSuperuserProfileID(id))
	return &SuperuserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SuperuserProfile.
func (c *SuperuserProfileClient) Delete() *SuperuserProfileDelete {
	mutation := newSuperuserProfileMutation(c.config, OpDelete)
	return &SuperuserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SuperuserProfileClient) DeleteOne(sp *SuperuserProfile) *SuperuserProfileDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SuperuserProfileClient) DeleteOneID(id int) *SuperuserProfileDeleteOne {
	builder := c.Delete().Where(superuserprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SuperuserProfileDeleteOne{builder}
}

// Query returns a query builder for SuperuserProfile.
func (c *SuperuserProfileClient) Query() *SuperuserProfileQuery {
	return &SuperuserProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSuperuserProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a SuperuserProfile entity by its id.
func (c *SuperuserProfileClient) Get(ctx context.Context, id int) (*SuperuserProfile, error) {
	return c.Query().Where(superuserprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SuperuserProfileClient) GetX(ctx context.Context, id int) *SuperuserProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a SuperuserProfile.
func (c *SuperuserProfileClient) QueryOwner(sp *SuperuserProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(superuserprofile.Table, superuserprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, superuserprofile.OwnerTable, superuserprofile.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SuperuserProfileClient) Hooks() []Hook {
	hooks := c.hooks.SuperuserProfile
	return append(hooks[:len(hooks):len(hooks)], superuserprofile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SuperuserProfileClient) Interceptors() []Interceptor {
	return c.inters.SuperuserProfile
}

func (c *SuperuserProfileClient) mutate(ctx context.Context, m *SuperuserProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SuperuserProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SuperuserProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SuperuserProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SuperuserProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgenerated: unknown SuperuserProfile mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySuperuserProfile queries the superuser_profile edge of a User.
func (c *UserClient) QuerySuperuserProfile(u *User) *SuperuserProfileQuery {
	query := (&SuperuserProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(superuserprofile.Table, superuserprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SuperuserProfileTable, user.SuperuserProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailCredential queries the email_credential edge of a User.
func (c *UserClient) QueryEmailCredential(u *User) *EmailCredentialQuery {
	query := (&EmailCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(emailcredential.Table, emailcredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.EmailCredentialTable, user.EmailCredentialColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLoginSessions queries the login_sessions edge of a User.
func (c *UserClient) QueryLoginSessions(u *User) *LoginSessionQuery {
	query := (&LoginSessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(loginsession.Table, loginsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LoginSessionsTable, user.LoginSessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPublicProfile queries the public_profile edge of a User.
func (c *UserClient) QueryPublicProfile(u *User) *UserPublicProfileQuery {
	query := (&UserPublicProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userpublicprofile.Table, userpublicprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.PublicProfileTable, user.PublicProfileColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgenerated: unknown User mutation op: %q", m.Op())
	}
}

// UserPublicProfileClient is a client for the UserPublicProfile schema.
type UserPublicProfileClient struct {
	config
}

// NewUserPublicProfileClient returns a client for the UserPublicProfile from the given config.
func NewUserPublicProfileClient(c config) *UserPublicProfileClient {
	return &UserPublicProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpublicprofile.Hooks(f(g(h())))`.
func (c *UserPublicProfileClient) Use(hooks ...Hook) {
	c.hooks.UserPublicProfile = append(c.hooks.UserPublicProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpublicprofile.Intercept(f(g(h())))`.
func (c *UserPublicProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPublicProfile = append(c.inters.UserPublicProfile, interceptors...)
}

// Create returns a builder for creating a UserPublicProfile entity.
func (c *UserPublicProfileClient) Create() *UserPublicProfileCreate {
	mutation := newUserPublicProfileMutation(c.config, OpCreate)
	return &UserPublicProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPublicProfile entities.
func (c *UserPublicProfileClient) CreateBulk(builders ...*UserPublicProfileCreate) *UserPublicProfileCreateBulk {
	return &UserPublicProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserPublicProfileClient) MapCreateBulk(slice any, setFunc func(*UserPublicProfileCreate, int)) *UserPublicProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserPublicProfileCreateBulk{err: fmt.Errorf("calling to UserPublicProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserPublicProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserPublicProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPublicProfile.
func (c *UserPublicProfileClient) Update() *UserPublicProfileUpdate {
	mutation := newUserPublicProfileMutation(c.config, OpUpdate)
	return &UserPublicProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPublicProfileClient) UpdateOne(upp *UserPublicProfile) *UserPublicProfileUpdateOne {
	mutation := newUserPublicProfileMutation(c.config, OpUpdateOne, withUserPublicProfile(upp))
	return &UserPublicProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPublicProfileClient) UpdateOneID(id int) *UserPublicProfileUpdateOne {
	mutation := newUserPublicProfileMutation(c.config, OpUpdateOne, withUserPublicProfileID(id))
	return &UserPublicProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPublicProfile.
func (c *UserPublicProfileClient) Delete() *UserPublicProfileDelete {
	mutation := newUserPublicProfileMutation(c.config, OpDelete)
	return &UserPublicProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPublicProfileClient) DeleteOne(upp *UserPublicProfile) *UserPublicProfileDeleteOne {
	return c.DeleteOneID(upp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPublicProfileClient) DeleteOneID(id int) *UserPublicProfileDeleteOne {
	builder := c.Delete().Where(userpublicprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPublicProfileDeleteOne{builder}
}

// Query returns a query builder for UserPublicProfile.
func (c *UserPublicProfileClient) Query() *UserPublicProfileQuery {
	return &UserPublicProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPublicProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPublicProfile entity by its id.
func (c *UserPublicProfileClient) Get(ctx context.Context, id int) (*UserPublicProfile, error) {
	return c.Query().Where(userpublicprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPublicProfileClient) GetX(ctx context.Context, id int) *UserPublicProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a UserPublicProfile.
func (c *UserPublicProfileClient) QueryOwner(upp *UserPublicProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpublicprofile.Table, userpublicprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, userpublicprofile.OwnerTable, userpublicprofile.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(upp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPublicProfileClient) Hooks() []Hook {
	hooks := c.hooks.UserPublicProfile
	return append(hooks[:len(hooks):len(hooks)], userpublicprofile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserPublicProfileClient) Interceptors() []Interceptor {
	return c.inters.UserPublicProfile
}

func (c *UserPublicProfileClient) mutate(ctx context.Context, m *UserPublicProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPublicProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPublicProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPublicProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPublicProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgenerated: unknown UserPublicProfile mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EmailCredential, LoginSession, SuperuserProfile, User,
		UserPublicProfile []ent.Hook
	}
	inters struct {
		EmailCredential, LoginSession, SuperuserProfile, User,
		UserPublicProfile []ent.Interceptor
	}
)
