// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"api/ent/entgenerated/emailcredential"
	"api/ent/entgenerated/loginsession"
	"api/ent/entgenerated/predicate"
	"api/ent/entgenerated/superuserprofile"
	"api/ent/entgenerated/user"
	"api/ent/entgenerated/userpublicprofile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailcredential.Table,
			Columns: emailcredential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: emailcredential.FieldID,
			},
		},
		Type: "EmailCredential",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailcredential.FieldOwnerID:      {Type: field.TypeInt, Column: emailcredential.FieldOwnerID},
			emailcredential.FieldEmail:        {Type: field.TypeString, Column: emailcredential.FieldEmail},
			emailcredential.FieldAlgorithm:    {Type: field.TypeEnum, Column: emailcredential.FieldAlgorithm},
			emailcredential.FieldPasswordHash: {Type: field.TypeBytes, Column: emailcredential.FieldPasswordHash},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   loginsession.Table,
			Columns: loginsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: loginsession.FieldID,
			},
		},
		Type: "LoginSession",
		Fields: map[string]*sqlgraph.FieldSpec{
			loginsession.FieldOwnerID:       {Type: field.TypeInt, Column: loginsession.FieldOwnerID},
			loginsession.FieldLastLoginTime: {Type: field.TypeTime, Column: loginsession.FieldLastLoginTime},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   superuserprofile.Table,
			Columns: superuserprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: superuserprofile.FieldID,
			},
		},
		Type: "SuperuserProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			superuserprofile.FieldOwnerID: {Type: field.TypeInt, Column: superuserprofile.FieldOwnerID},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type:   "User",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userpublicprofile.Table,
			Columns: userpublicprofile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userpublicprofile.FieldID,
			},
		},
		Type: "UserPublicProfile",
		Fields: map[string]*sqlgraph.FieldSpec{
			userpublicprofile.FieldOwnerID:      {Type: field.TypeInt, Column: userpublicprofile.FieldOwnerID},
			userpublicprofile.FieldHandleName:   {Type: field.TypeString, Column: userpublicprofile.FieldHandleName},
			userpublicprofile.FieldPhotoBlobKey: {Type: field.TypeString, Column: userpublicprofile.FieldPhotoBlobKey},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailcredential.OwnerTable,
			Columns: []string{emailcredential.OwnerColumn},
			Bidi:    false,
		},
		"EmailCredential",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   loginsession.OwnerTable,
			Columns: []string{loginsession.OwnerColumn},
			Bidi:    false,
		},
		"LoginSession",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   superuserprofile.OwnerTable,
			Columns: []string{superuserprofile.OwnerColumn},
			Bidi:    false,
		},
		"SuperuserProfile",
		"User",
	)
	graph.MustAddE(
		"superuser_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SuperuserProfileTable,
			Columns: []string{user.SuperuserProfileColumn},
			Bidi:    false,
		},
		"User",
		"SuperuserProfile",
	)
	graph.MustAddE(
		"email_credential",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.EmailCredentialTable,
			Columns: []string{user.EmailCredentialColumn},
			Bidi:    false,
		},
		"User",
		"EmailCredential",
	)
	graph.MustAddE(
		"login_sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LoginSessionsTable,
			Columns: []string{user.LoginSessionsColumn},
			Bidi:    false,
		},
		"User",
		"LoginSession",
	)
	graph.MustAddE(
		"public_profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.PublicProfileTable,
			Columns: []string{user.PublicProfileColumn},
			Bidi:    false,
		},
		"User",
		"UserPublicProfile",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpublicprofile.OwnerTable,
			Columns: []string{userpublicprofile.OwnerColumn},
			Bidi:    false,
		},
		"UserPublicProfile",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EmailCredentialQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailCredentialQuery builder.
func (ecq *EmailCredentialQuery) Filter() *EmailCredentialFilter {
	return &EmailCredentialFilter{config: ecq.config, predicateAdder: ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailCredentialMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailCredentialMutation builder.
func (m *EmailCredentialMutation) Filter() *EmailCredentialFilter {
	return &EmailCredentialFilter{config: m.config, predicateAdder: m}
}

// EmailCredentialFilter provides a generic filtering capability at runtime for EmailCredentialQuery.
type EmailCredentialFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailCredentialFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *EmailCredentialFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(emailcredential.FieldID))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *EmailCredentialFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(emailcredential.FieldOwnerID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *EmailCredentialFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(emailcredential.FieldEmail))
}

// WhereAlgorithm applies the entql string predicate on the algorithm field.
func (f *EmailCredentialFilter) WhereAlgorithm(p entql.StringP) {
	f.Where(p.Field(emailcredential.FieldAlgorithm))
}

// WherePasswordHash applies the entql []byte predicate on the password_hash field.
func (f *EmailCredentialFilter) WherePasswordHash(p entql.BytesP) {
	f.Where(p.Field(emailcredential.FieldPasswordHash))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EmailCredentialFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EmailCredentialFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lsq *LoginSessionQuery) addPredicate(pred func(s *sql.Selector)) {
	lsq.predicates = append(lsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LoginSessionQuery builder.
func (lsq *LoginSessionQuery) Filter() *LoginSessionFilter {
	return &LoginSessionFilter{config: lsq.config, predicateAdder: lsq}
}

// addPredicate implements the predicateAdder interface.
func (m *LoginSessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LoginSessionMutation builder.
func (m *LoginSessionMutation) Filter() *LoginSessionFilter {
	return &LoginSessionFilter{config: m.config, predicateAdder: m}
}

// LoginSessionFilter provides a generic filtering capability at runtime for LoginSessionQuery.
type LoginSessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LoginSessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *LoginSessionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(loginsession.FieldID))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *LoginSessionFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(loginsession.FieldOwnerID))
}

// WhereLastLoginTime applies the entql time.Time predicate on the last_login_time field.
func (f *LoginSessionFilter) WhereLastLoginTime(p entql.TimeP) {
	f.Where(p.Field(loginsession.FieldLastLoginTime))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *LoginSessionFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *LoginSessionFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spq *SuperuserProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	spq.predicates = append(spq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SuperuserProfileQuery builder.
func (spq *SuperuserProfileQuery) Filter() *SuperuserProfileFilter {
	return &SuperuserProfileFilter{config: spq.config, predicateAdder: spq}
}

// addPredicate implements the predicateAdder interface.
func (m *SuperuserProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SuperuserProfileMutation builder.
func (m *SuperuserProfileMutation) Filter() *SuperuserProfileFilter {
	return &SuperuserProfileFilter{config: m.config, predicateAdder: m}
}

// SuperuserProfileFilter provides a generic filtering capability at runtime for SuperuserProfileQuery.
type SuperuserProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SuperuserProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *SuperuserProfileFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(superuserprofile.FieldID))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *SuperuserProfileFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(superuserprofile.FieldOwnerID))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *SuperuserProfileFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *SuperuserProfileFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereHasSuperuserProfile applies a predicate to check if query has an edge superuser_profile.
func (f *UserFilter) WhereHasSuperuserProfile() {
	f.Where(entql.HasEdge("superuser_profile"))
}

// WhereHasSuperuserProfileWith applies a predicate to check if query has an edge superuser_profile with a given conditions (other predicates).
func (f *UserFilter) WhereHasSuperuserProfileWith(preds ...predicate.SuperuserProfile) {
	f.Where(entql.HasEdgeWith("superuser_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailCredential applies a predicate to check if query has an edge email_credential.
func (f *UserFilter) WhereHasEmailCredential() {
	f.Where(entql.HasEdge("email_credential"))
}

// WhereHasEmailCredentialWith applies a predicate to check if query has an edge email_credential with a given conditions (other predicates).
func (f *UserFilter) WhereHasEmailCredentialWith(preds ...predicate.EmailCredential) {
	f.Where(entql.HasEdgeWith("email_credential", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLoginSessions applies a predicate to check if query has an edge login_sessions.
func (f *UserFilter) WhereHasLoginSessions() {
	f.Where(entql.HasEdge("login_sessions"))
}

// WhereHasLoginSessionsWith applies a predicate to check if query has an edge login_sessions with a given conditions (other predicates).
func (f *UserFilter) WhereHasLoginSessionsWith(preds ...predicate.LoginSession) {
	f.Where(entql.HasEdgeWith("login_sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPublicProfile applies a predicate to check if query has an edge public_profile.
func (f *UserFilter) WhereHasPublicProfile() {
	f.Where(entql.HasEdge("public_profile"))
}

// WhereHasPublicProfileWith applies a predicate to check if query has an edge public_profile with a given conditions (other predicates).
func (f *UserFilter) WhereHasPublicProfileWith(preds ...predicate.UserPublicProfile) {
	f.Where(entql.HasEdgeWith("public_profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uppq *UserPublicProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	uppq.predicates = append(uppq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserPublicProfileQuery builder.
func (uppq *UserPublicProfileQuery) Filter() *UserPublicProfileFilter {
	return &UserPublicProfileFilter{config: uppq.config, predicateAdder: uppq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserPublicProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserPublicProfileMutation builder.
func (m *UserPublicProfileMutation) Filter() *UserPublicProfileFilter {
	return &UserPublicProfileFilter{config: m.config, predicateAdder: m}
}

// UserPublicProfileFilter provides a generic filtering capability at runtime for UserPublicProfileQuery.
type UserPublicProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserPublicProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserPublicProfileFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(userpublicprofile.FieldID))
}

// WhereOwnerID applies the entql int predicate on the owner_id field.
func (f *UserPublicProfileFilter) WhereOwnerID(p entql.IntP) {
	f.Where(p.Field(userpublicprofile.FieldOwnerID))
}

// WhereHandleName applies the entql string predicate on the handle_name field.
func (f *UserPublicProfileFilter) WhereHandleName(p entql.StringP) {
	f.Where(p.Field(userpublicprofile.FieldHandleName))
}

// WherePhotoBlobKey applies the entql string predicate on the photo_blob_key field.
func (f *UserPublicProfileFilter) WherePhotoBlobKey(p entql.StringP) {
	f.Where(p.Field(userpublicprofile.FieldPhotoBlobKey))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *UserPublicProfileFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *UserPublicProfileFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
