// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ec *EmailCredential) Owner(ctx context.Context) (*User, error) {
	result, err := ec.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ec.QueryOwner().Only(ctx)
	}
	return result, err
}

func (ls *LoginSession) Owner(ctx context.Context) (*User, error) {
	result, err := ls.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = ls.QueryOwner().Only(ctx)
	}
	return result, err
}

func (u *User) EmailCredential(ctx context.Context) (*EmailCredential, error) {
	result, err := u.Edges.EmailCredentialOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryEmailCredential().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) LoginSessions(ctx context.Context) (result []*LoginSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedLoginSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.LoginSessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryLoginSessions().All(ctx)
	}
	return result, err
}

func (u *User) PublicProfile(ctx context.Context) (*UserPublicProfile, error) {
	result, err := u.Edges.PublicProfileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryPublicProfile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (upp *UserPublicProfile) Owner(ctx context.Context) (*User, error) {
	result, err := upp.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = upp.QueryOwner().Only(ctx)
	}
	return result, err
}
