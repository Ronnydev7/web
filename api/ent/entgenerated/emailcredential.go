// Code generated by ent, DO NOT EDIT.

package entgenerated

import (
	"api/ent/entgenerated/emailcredential"
	"api/ent/entgenerated/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EmailCredential is the model entity for the EmailCredential schema.
type EmailCredential struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID int `json:"owner_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Algorithm holds the value of the "algorithm" field.
	Algorithm emailcredential.Algorithm `json:"algorithm,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash []byte `json:"password_hash,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmailCredentialQuery when eager-loading is set.
	Edges        EmailCredentialEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmailCredentialEdges holds the relations/edges for other nodes in the graph.
type EmailCredentialEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmailCredentialEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailCredential) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailcredential.FieldPasswordHash:
			values[i] = new([]byte)
		case emailcredential.FieldID, emailcredential.FieldOwnerID:
			values[i] = new(sql.NullInt64)
		case emailcredential.FieldEmail, emailcredential.FieldAlgorithm:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailCredential fields.
func (ec *EmailCredential) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailcredential.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = int(value.Int64)
		case emailcredential.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ec.OwnerID = int(value.Int64)
			}
		case emailcredential.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ec.Email = value.String
			}
		case emailcredential.FieldAlgorithm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algorithm", values[i])
			} else if value.Valid {
				ec.Algorithm = emailcredential.Algorithm(value.String)
			}
		case emailcredential.FieldPasswordHash:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value != nil {
				ec.PasswordHash = *value
			}
		default:
			ec.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailCredential.
// This includes values selected through modifiers, order, etc.
func (ec *EmailCredential) Value(name string) (ent.Value, error) {
	return ec.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the EmailCredential entity.
func (ec *EmailCredential) QueryOwner() *UserQuery {
	return NewEmailCredentialClient(ec.config).QueryOwner(ec)
}

// Update returns a builder for updating this EmailCredential.
// Note that you need to call EmailCredential.Unwrap() before calling this method if this EmailCredential
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EmailCredential) Update() *EmailCredentialUpdateOne {
	return NewEmailCredentialClient(ec.config).UpdateOne(ec)
}

// Unwrap unwraps the EmailCredential entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EmailCredential) Unwrap() *EmailCredential {
	_tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("entgenerated: EmailCredential is not a transactional entity")
	}
	ec.config.driver = _tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EmailCredential) String() string {
	var builder strings.Builder
	builder.WriteString("EmailCredential(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ec.ID))
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", ec.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ec.Email)
	builder.WriteString(", ")
	builder.WriteString("algorithm=")
	builder.WriteString(fmt.Sprintf("%v", ec.Algorithm))
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(fmt.Sprintf("%v", ec.PasswordHash))
	builder.WriteByte(')')
	return builder.String()
}

// EmailCredentials is a parsable slice of EmailCredential.
type EmailCredentials []*EmailCredential
