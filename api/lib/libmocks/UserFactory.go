// Code generated by mockery v2.36.1. DO NOT EDIT.

package libmocks

import (
	entgenerated "api/ent/entgenerated"
	context "context"

	lib "api/lib"

	mock "github.com/stretchr/testify/mock"
)

// UserFactory is an autogenerated mock type for the UserFactory type
type UserFactory struct {
	mock.Mock
}

type UserFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *UserFactory) EXPECT() *UserFactory_Expecter {
	return &UserFactory_Expecter{mock: &_m.Mock}
}

// FromRefreshTokenCookieBypassPrivacy provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserFactory) FromRefreshTokenCookieBypassPrivacy(_a0 context.Context, _a1 lib.CookieReader, _a2 lib.UserTokenFactory) (*entgenerated.User, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *entgenerated.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, lib.CookieReader, lib.UserTokenFactory) (*entgenerated.User, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, lib.CookieReader, lib.UserTokenFactory) *entgenerated.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entgenerated.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, lib.CookieReader, lib.UserTokenFactory) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserFactory_FromRefreshTokenCookieBypassPrivacy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromRefreshTokenCookieBypassPrivacy'
type UserFactory_FromRefreshTokenCookieBypassPrivacy_Call struct {
	*mock.Call
}

// FromRefreshTokenCookieBypassPrivacy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 lib.CookieReader
//   - _a2 lib.UserTokenFactory
func (_e *UserFactory_Expecter) FromRefreshTokenCookieBypassPrivacy(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call {
	return &UserFactory_FromRefreshTokenCookieBypassPrivacy_Call{Call: _e.mock.On("FromRefreshTokenCookieBypassPrivacy", _a0, _a1, _a2)}
}

func (_c *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call) Run(run func(_a0 context.Context, _a1 lib.CookieReader, _a2 lib.UserTokenFactory)) *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(lib.CookieReader), args[2].(lib.UserTokenFactory))
	})
	return _c
}

func (_c *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call) Return(_a0 *entgenerated.User, _a1 error) *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call) RunAndReturn(run func(context.Context, lib.CookieReader, lib.UserTokenFactory) (*entgenerated.User, error)) *UserFactory_FromRefreshTokenCookieBypassPrivacy_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserFactory creates a new instance of UserFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserFactory {
	mock := &UserFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
