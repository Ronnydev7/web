// Code generated by mockery v2.36.1. DO NOT EDIT.

package libmocks

import (
	entgenerated "api/ent/entgenerated"
	context "context"

	intl "api/intl"

	lib "api/lib"

	mock "github.com/stretchr/testify/mock"
)

// UserTokenFactory is an autogenerated mock type for the UserTokenFactory type
type UserTokenFactory struct {
	mock.Mock
}

type UserTokenFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *UserTokenFactory) EXPECT() *UserTokenFactory_Expecter {
	return &UserTokenFactory_Expecter{mock: &_m.Mock}
}

// CreateAuthToken provides a mock function with given fields: user
func (_m *UserTokenFactory) CreateAuthToken(user *entgenerated.User) (string, intl.IntlError) {
	ret := _m.Called(user)

	var r0 string
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(*entgenerated.User) (string, intl.IntlError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entgenerated.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entgenerated.User) intl.IntlError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_CreateAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthToken'
type UserTokenFactory_CreateAuthToken_Call struct {
	*mock.Call
}

// CreateAuthToken is a helper method to define mock.On call
//   - user *entgenerated.User
func (_e *UserTokenFactory_Expecter) CreateAuthToken(user interface{}) *UserTokenFactory_CreateAuthToken_Call {
	return &UserTokenFactory_CreateAuthToken_Call{Call: _e.mock.On("CreateAuthToken", user)}
}

func (_c *UserTokenFactory_CreateAuthToken_Call) Run(run func(user *entgenerated.User)) *UserTokenFactory_CreateAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entgenerated.User))
	})
	return _c
}

func (_c *UserTokenFactory_CreateAuthToken_Call) Return(_a0 string, _a1 intl.IntlError) *UserTokenFactory_CreateAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_CreateAuthToken_Call) RunAndReturn(run func(*entgenerated.User) (string, intl.IntlError)) *UserTokenFactory_CreateAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function with given fields: loginSession
func (_m *UserTokenFactory) CreateRefreshToken(loginSession *entgenerated.LoginSession) (string, intl.IntlError) {
	ret := _m.Called(loginSession)

	var r0 string
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(*entgenerated.LoginSession) (string, intl.IntlError)); ok {
		return rf(loginSession)
	}
	if rf, ok := ret.Get(0).(func(*entgenerated.LoginSession) string); ok {
		r0 = rf(loginSession)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entgenerated.LoginSession) intl.IntlError); ok {
		r1 = rf(loginSession)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type UserTokenFactory_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - loginSession *entgenerated.LoginSession
func (_e *UserTokenFactory_Expecter) CreateRefreshToken(loginSession interface{}) *UserTokenFactory_CreateRefreshToken_Call {
	return &UserTokenFactory_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", loginSession)}
}

func (_c *UserTokenFactory_CreateRefreshToken_Call) Run(run func(loginSession *entgenerated.LoginSession)) *UserTokenFactory_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entgenerated.LoginSession))
	})
	return _c
}

func (_c *UserTokenFactory_CreateRefreshToken_Call) Return(_a0 string, _a1 intl.IntlError) *UserTokenFactory_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_CreateRefreshToken_Call) RunAndReturn(run func(*entgenerated.LoginSession) (string, intl.IntlError)) *UserTokenFactory_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateResetPasswordToken provides a mock function with given fields: credential
func (_m *UserTokenFactory) CreateResetPasswordToken(credential *entgenerated.EmailCredential) (string, intl.IntlError) {
	ret := _m.Called(credential)

	var r0 string
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(*entgenerated.EmailCredential) (string, intl.IntlError)); ok {
		return rf(credential)
	}
	if rf, ok := ret.Get(0).(func(*entgenerated.EmailCredential) string); ok {
		r0 = rf(credential)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entgenerated.EmailCredential) intl.IntlError); ok {
		r1 = rf(credential)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_CreateResetPasswordToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResetPasswordToken'
type UserTokenFactory_CreateResetPasswordToken_Call struct {
	*mock.Call
}

// CreateResetPasswordToken is a helper method to define mock.On call
//   - credential *entgenerated.EmailCredential
func (_e *UserTokenFactory_Expecter) CreateResetPasswordToken(credential interface{}) *UserTokenFactory_CreateResetPasswordToken_Call {
	return &UserTokenFactory_CreateResetPasswordToken_Call{Call: _e.mock.On("CreateResetPasswordToken", credential)}
}

func (_c *UserTokenFactory_CreateResetPasswordToken_Call) Run(run func(credential *entgenerated.EmailCredential)) *UserTokenFactory_CreateResetPasswordToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entgenerated.EmailCredential))
	})
	return _c
}

func (_c *UserTokenFactory_CreateResetPasswordToken_Call) Return(_a0 string, _a1 intl.IntlError) *UserTokenFactory_CreateResetPasswordToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_CreateResetPasswordToken_Call) RunAndReturn(run func(*entgenerated.EmailCredential) (string, intl.IntlError)) *UserTokenFactory_CreateResetPasswordToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthTokenSignature provides a mock function with given fields: _a0
func (_m *UserTokenFactory) GetAuthTokenSignature(_a0 lib.AuthTokenClaims) ([]byte, intl.IntlError) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(lib.AuthTokenClaims) ([]byte, intl.IntlError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(lib.AuthTokenClaims) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(lib.AuthTokenClaims) intl.IntlError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_GetAuthTokenSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthTokenSignature'
type UserTokenFactory_GetAuthTokenSignature_Call struct {
	*mock.Call
}

// GetAuthTokenSignature is a helper method to define mock.On call
//   - _a0 lib.AuthTokenClaims
func (_e *UserTokenFactory_Expecter) GetAuthTokenSignature(_a0 interface{}) *UserTokenFactory_GetAuthTokenSignature_Call {
	return &UserTokenFactory_GetAuthTokenSignature_Call{Call: _e.mock.On("GetAuthTokenSignature", _a0)}
}

func (_c *UserTokenFactory_GetAuthTokenSignature_Call) Run(run func(_a0 lib.AuthTokenClaims)) *UserTokenFactory_GetAuthTokenSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lib.AuthTokenClaims))
	})
	return _c
}

func (_c *UserTokenFactory_GetAuthTokenSignature_Call) Return(_a0 []byte, _a1 intl.IntlError) *UserTokenFactory_GetAuthTokenSignature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_GetAuthTokenSignature_Call) RunAndReturn(run func(lib.AuthTokenClaims) ([]byte, intl.IntlError)) *UserTokenFactory_GetAuthTokenSignature_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenSignature provides a mock function with given fields: _a0
func (_m *UserTokenFactory) GetRefreshTokenSignature(_a0 lib.RefreshTokenClaims) ([]byte, intl.IntlError) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(lib.RefreshTokenClaims) ([]byte, intl.IntlError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(lib.RefreshTokenClaims) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(lib.RefreshTokenClaims) intl.IntlError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_GetRefreshTokenSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenSignature'
type UserTokenFactory_GetRefreshTokenSignature_Call struct {
	*mock.Call
}

// GetRefreshTokenSignature is a helper method to define mock.On call
//   - _a0 lib.RefreshTokenClaims
func (_e *UserTokenFactory_Expecter) GetRefreshTokenSignature(_a0 interface{}) *UserTokenFactory_GetRefreshTokenSignature_Call {
	return &UserTokenFactory_GetRefreshTokenSignature_Call{Call: _e.mock.On("GetRefreshTokenSignature", _a0)}
}

func (_c *UserTokenFactory_GetRefreshTokenSignature_Call) Run(run func(_a0 lib.RefreshTokenClaims)) *UserTokenFactory_GetRefreshTokenSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lib.RefreshTokenClaims))
	})
	return _c
}

func (_c *UserTokenFactory_GetRefreshTokenSignature_Call) Return(_a0 []byte, _a1 intl.IntlError) *UserTokenFactory_GetRefreshTokenSignature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_GetRefreshTokenSignature_Call) RunAndReturn(run func(lib.RefreshTokenClaims) ([]byte, intl.IntlError)) *UserTokenFactory_GetRefreshTokenSignature_Call {
	_c.Call.Return(run)
	return _c
}

// GetResetPasswordTokenSignature provides a mock function with given fields: _a0, _a1
func (_m *UserTokenFactory) GetResetPasswordTokenSignature(_a0 lib.ResetPasswordTokenClaims, _a1 *entgenerated.EmailCredential) ([]byte, intl.IntlError) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(lib.ResetPasswordTokenClaims, *entgenerated.EmailCredential) ([]byte, intl.IntlError)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(lib.ResetPasswordTokenClaims, *entgenerated.EmailCredential) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(lib.ResetPasswordTokenClaims, *entgenerated.EmailCredential) intl.IntlError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_GetResetPasswordTokenSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResetPasswordTokenSignature'
type UserTokenFactory_GetResetPasswordTokenSignature_Call struct {
	*mock.Call
}

// GetResetPasswordTokenSignature is a helper method to define mock.On call
//   - _a0 lib.ResetPasswordTokenClaims
//   - _a1 *entgenerated.EmailCredential
func (_e *UserTokenFactory_Expecter) GetResetPasswordTokenSignature(_a0 interface{}, _a1 interface{}) *UserTokenFactory_GetResetPasswordTokenSignature_Call {
	return &UserTokenFactory_GetResetPasswordTokenSignature_Call{Call: _e.mock.On("GetResetPasswordTokenSignature", _a0, _a1)}
}

func (_c *UserTokenFactory_GetResetPasswordTokenSignature_Call) Run(run func(_a0 lib.ResetPasswordTokenClaims, _a1 *entgenerated.EmailCredential)) *UserTokenFactory_GetResetPasswordTokenSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lib.ResetPasswordTokenClaims), args[1].(*entgenerated.EmailCredential))
	})
	return _c
}

func (_c *UserTokenFactory_GetResetPasswordTokenSignature_Call) Return(_a0 []byte, _a1 intl.IntlError) *UserTokenFactory_GetResetPasswordTokenSignature_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_GetResetPasswordTokenSignature_Call) RunAndReturn(run func(lib.ResetPasswordTokenClaims, *entgenerated.EmailCredential) ([]byte, intl.IntlError)) *UserTokenFactory_GetResetPasswordTokenSignature_Call {
	_c.Call.Return(run)
	return _c
}

// ParseAuthToken provides a mock function with given fields: authTokenString
func (_m *UserTokenFactory) ParseAuthToken(authTokenString string) (lib.AuthTokenClaims, intl.IntlError) {
	ret := _m.Called(authTokenString)

	var r0 lib.AuthTokenClaims
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(string) (lib.AuthTokenClaims, intl.IntlError)); ok {
		return rf(authTokenString)
	}
	if rf, ok := ret.Get(0).(func(string) lib.AuthTokenClaims); ok {
		r0 = rf(authTokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lib.AuthTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) intl.IntlError); ok {
		r1 = rf(authTokenString)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_ParseAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseAuthToken'
type UserTokenFactory_ParseAuthToken_Call struct {
	*mock.Call
}

// ParseAuthToken is a helper method to define mock.On call
//   - authTokenString string
func (_e *UserTokenFactory_Expecter) ParseAuthToken(authTokenString interface{}) *UserTokenFactory_ParseAuthToken_Call {
	return &UserTokenFactory_ParseAuthToken_Call{Call: _e.mock.On("ParseAuthToken", authTokenString)}
}

func (_c *UserTokenFactory_ParseAuthToken_Call) Run(run func(authTokenString string)) *UserTokenFactory_ParseAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserTokenFactory_ParseAuthToken_Call) Return(_a0 lib.AuthTokenClaims, _a1 intl.IntlError) *UserTokenFactory_ParseAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_ParseAuthToken_Call) RunAndReturn(run func(string) (lib.AuthTokenClaims, intl.IntlError)) *UserTokenFactory_ParseAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseRefreshToken provides a mock function with given fields: refreshTokenString
func (_m *UserTokenFactory) ParseRefreshToken(refreshTokenString string) (lib.RefreshTokenClaims, intl.IntlError) {
	ret := _m.Called(refreshTokenString)

	var r0 lib.RefreshTokenClaims
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(string) (lib.RefreshTokenClaims, intl.IntlError)); ok {
		return rf(refreshTokenString)
	}
	if rf, ok := ret.Get(0).(func(string) lib.RefreshTokenClaims); ok {
		r0 = rf(refreshTokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lib.RefreshTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) intl.IntlError); ok {
		r1 = rf(refreshTokenString)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_ParseRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseRefreshToken'
type UserTokenFactory_ParseRefreshToken_Call struct {
	*mock.Call
}

// ParseRefreshToken is a helper method to define mock.On call
//   - refreshTokenString string
func (_e *UserTokenFactory_Expecter) ParseRefreshToken(refreshTokenString interface{}) *UserTokenFactory_ParseRefreshToken_Call {
	return &UserTokenFactory_ParseRefreshToken_Call{Call: _e.mock.On("ParseRefreshToken", refreshTokenString)}
}

func (_c *UserTokenFactory_ParseRefreshToken_Call) Run(run func(refreshTokenString string)) *UserTokenFactory_ParseRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserTokenFactory_ParseRefreshToken_Call) Return(_a0 lib.RefreshTokenClaims, _a1 intl.IntlError) *UserTokenFactory_ParseRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_ParseRefreshToken_Call) RunAndReturn(run func(string) (lib.RefreshTokenClaims, intl.IntlError)) *UserTokenFactory_ParseRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseResetPasswordToken provides a mock function with given fields: ctx, tokenString, entClient
func (_m *UserTokenFactory) ParseResetPasswordToken(ctx context.Context, tokenString string, entClient *entgenerated.Client) (lib.ResetPasswordTokenClaims, intl.IntlError) {
	ret := _m.Called(ctx, tokenString, entClient)

	var r0 lib.ResetPasswordTokenClaims
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(context.Context, string, *entgenerated.Client) (lib.ResetPasswordTokenClaims, intl.IntlError)); ok {
		return rf(ctx, tokenString, entClient)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *entgenerated.Client) lib.ResetPasswordTokenClaims); ok {
		r0 = rf(ctx, tokenString, entClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lib.ResetPasswordTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *entgenerated.Client) intl.IntlError); ok {
		r1 = rf(ctx, tokenString, entClient)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// UserTokenFactory_ParseResetPasswordToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseResetPasswordToken'
type UserTokenFactory_ParseResetPasswordToken_Call struct {
	*mock.Call
}

// ParseResetPasswordToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
//   - entClient *entgenerated.Client
func (_e *UserTokenFactory_Expecter) ParseResetPasswordToken(ctx interface{}, tokenString interface{}, entClient interface{}) *UserTokenFactory_ParseResetPasswordToken_Call {
	return &UserTokenFactory_ParseResetPasswordToken_Call{Call: _e.mock.On("ParseResetPasswordToken", ctx, tokenString, entClient)}
}

func (_c *UserTokenFactory_ParseResetPasswordToken_Call) Run(run func(ctx context.Context, tokenString string, entClient *entgenerated.Client)) *UserTokenFactory_ParseResetPasswordToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*entgenerated.Client))
	})
	return _c
}

func (_c *UserTokenFactory_ParseResetPasswordToken_Call) Return(_a0 lib.ResetPasswordTokenClaims, _a1 intl.IntlError) *UserTokenFactory_ParseResetPasswordToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserTokenFactory_ParseResetPasswordToken_Call) RunAndReturn(run func(context.Context, string, *entgenerated.Client) (lib.ResetPasswordTokenClaims, intl.IntlError)) *UserTokenFactory_ParseResetPasswordToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserTokenFactory creates a new instance of UserTokenFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserTokenFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserTokenFactory {
	mock := &UserTokenFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
