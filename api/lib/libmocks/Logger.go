// Code generated by mockery v2.36.1. DO NOT EDIT.

package libmocks

import mock "github.com/stretchr/testify/mock"

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// LogError provides a mock function with given fields: err
func (_m *Logger) LogError(err error) {
	_m.Called(err)
}

// Logger_LogError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogError'
type Logger_LogError_Call struct {
	*mock.Call
}

// LogError is a helper method to define mock.On call
//   - err error
func (_e *Logger_Expecter) LogError(err interface{}) *Logger_LogError_Call {
	return &Logger_LogError_Call{Call: _e.mock.On("LogError", err)}
}

func (_c *Logger_LogError_Call) Run(run func(err error)) *Logger_LogError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Logger_LogError_Call) Return() *Logger_LogError_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_LogError_Call) RunAndReturn(run func(error)) *Logger_LogError_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
