// Code generated by mockery v2.36.1. DO NOT EDIT.

package libmocks

import (
	entgenerated "api/ent/entgenerated"
	context "context"

	lib "api/lib"

	mock "github.com/stretchr/testify/mock"
)

// EmailCredentialManager is an autogenerated mock type for the EmailCredentialManager type
type EmailCredentialManager struct {
	mock.Mock
}

type EmailCredentialManager_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailCredentialManager) EXPECT() *EmailCredentialManager_Expecter {
	return &EmailCredentialManager_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, client, email, rawPassword
func (_m *EmailCredentialManager) Login(ctx context.Context, client *entgenerated.Client, email string, rawPassword string) (*lib.EmailCredentialLoginResult, error) {
	ret := _m.Called(ctx, client, email, rawPassword)

	var r0 *lib.EmailCredentialLoginResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entgenerated.Client, string, string) (*lib.EmailCredentialLoginResult, error)); ok {
		return rf(ctx, client, email, rawPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entgenerated.Client, string, string) *lib.EmailCredentialLoginResult); ok {
		r0 = rf(ctx, client, email, rawPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lib.EmailCredentialLoginResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entgenerated.Client, string, string) error); ok {
		r1 = rf(ctx, client, email, rawPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailCredentialManager_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type EmailCredentialManager_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - client *entgenerated.Client
//   - email string
//   - rawPassword string
func (_e *EmailCredentialManager_Expecter) Login(ctx interface{}, client interface{}, email interface{}, rawPassword interface{}) *EmailCredentialManager_Login_Call {
	return &EmailCredentialManager_Login_Call{Call: _e.mock.On("Login", ctx, client, email, rawPassword)}
}

func (_c *EmailCredentialManager_Login_Call) Run(run func(ctx context.Context, client *entgenerated.Client, email string, rawPassword string)) *EmailCredentialManager_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entgenerated.Client), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *EmailCredentialManager_Login_Call) Return(_a0 *lib.EmailCredentialLoginResult, _a1 error) *EmailCredentialManager_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmailCredentialManager_Login_Call) RunAndReturn(run func(context.Context, *entgenerated.Client, string, string) (*lib.EmailCredentialLoginResult, error)) *EmailCredentialManager_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailCredentialManager creates a new instance of EmailCredentialManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailCredentialManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailCredentialManager {
	mock := &EmailCredentialManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
