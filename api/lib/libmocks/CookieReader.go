// Code generated by mockery v2.36.1. DO NOT EDIT.

package libmocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CookieReader is an autogenerated mock type for the CookieReader type
type CookieReader struct {
	mock.Mock
}

type CookieReader_Expecter struct {
	mock *mock.Mock
}

func (_m *CookieReader) EXPECT() *CookieReader_Expecter {
	return &CookieReader_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: name
func (_m *CookieReader) Read(name string) (*http.Cookie, error) {
	ret := _m.Called(name)

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*http.Cookie, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CookieReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type CookieReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - name string
func (_e *CookieReader_Expecter) Read(name interface{}) *CookieReader_Read_Call {
	return &CookieReader_Read_Call{Call: _e.mock.On("Read", name)}
}

func (_c *CookieReader_Read_Call) Run(run func(name string)) *CookieReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *CookieReader_Read_Call) Return(_a0 *http.Cookie, _a1 error) *CookieReader_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CookieReader_Read_Call) RunAndReturn(run func(string) (*http.Cookie, error)) *CookieReader_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRefreshToken provides a mock function with given fields:
func (_m *CookieReader) ReadRefreshToken() (*http.Cookie, error) {
	ret := _m.Called()

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func() (*http.Cookie, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CookieReader_ReadRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRefreshToken'
type CookieReader_ReadRefreshToken_Call struct {
	*mock.Call
}

// ReadRefreshToken is a helper method to define mock.On call
func (_e *CookieReader_Expecter) ReadRefreshToken() *CookieReader_ReadRefreshToken_Call {
	return &CookieReader_ReadRefreshToken_Call{Call: _e.mock.On("ReadRefreshToken")}
}

func (_c *CookieReader_ReadRefreshToken_Call) Run(run func()) *CookieReader_ReadRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CookieReader_ReadRefreshToken_Call) Return(_a0 *http.Cookie, _a1 error) *CookieReader_ReadRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CookieReader_ReadRefreshToken_Call) RunAndReturn(run func() (*http.Cookie, error)) *CookieReader_ReadRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewCookieReader creates a new instance of CookieReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCookieReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *CookieReader {
	mock := &CookieReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
