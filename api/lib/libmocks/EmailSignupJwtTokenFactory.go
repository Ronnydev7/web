// Code generated by mockery v2.36.1. DO NOT EDIT.

package libmocks

import (
	intl "api/intl"
	lib "api/lib"

	mock "github.com/stretchr/testify/mock"
)

// EmailSignupJwtTokenFactory is an autogenerated mock type for the EmailSignupJwtTokenFactory type
type EmailSignupJwtTokenFactory struct {
	mock.Mock
}

type EmailSignupJwtTokenFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailSignupJwtTokenFactory) EXPECT() *EmailSignupJwtTokenFactory_Expecter {
	return &EmailSignupJwtTokenFactory_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: email
func (_m *EmailSignupJwtTokenFactory) Create(email string) (string, intl.IntlError) {
	ret := _m.Called(email)

	var r0 string
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(string) (string, intl.IntlError)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) intl.IntlError); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// EmailSignupJwtTokenFactory_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type EmailSignupJwtTokenFactory_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - email string
func (_e *EmailSignupJwtTokenFactory_Expecter) Create(email interface{}) *EmailSignupJwtTokenFactory_Create_Call {
	return &EmailSignupJwtTokenFactory_Create_Call{Call: _e.mock.On("Create", email)}
}

func (_c *EmailSignupJwtTokenFactory_Create_Call) Run(run func(email string)) *EmailSignupJwtTokenFactory_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EmailSignupJwtTokenFactory_Create_Call) Return(_a0 string, _a1 intl.IntlError) *EmailSignupJwtTokenFactory_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmailSignupJwtTokenFactory_Create_Call) RunAndReturn(run func(string) (string, intl.IntlError)) *EmailSignupJwtTokenFactory_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignatureSecret provides a mock function with given fields: claims
func (_m *EmailSignupJwtTokenFactory) GetSignatureSecret(claims lib.EmailSignupTokenClaims) ([]byte, intl.IntlError) {
	ret := _m.Called(claims)

	var r0 []byte
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(lib.EmailSignupTokenClaims) ([]byte, intl.IntlError)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(lib.EmailSignupTokenClaims) []byte); ok {
		r0 = rf(claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(lib.EmailSignupTokenClaims) intl.IntlError); ok {
		r1 = rf(claims)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// EmailSignupJwtTokenFactory_GetSignatureSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignatureSecret'
type EmailSignupJwtTokenFactory_GetSignatureSecret_Call struct {
	*mock.Call
}

// GetSignatureSecret is a helper method to define mock.On call
//   - claims lib.EmailSignupTokenClaims
func (_e *EmailSignupJwtTokenFactory_Expecter) GetSignatureSecret(claims interface{}) *EmailSignupJwtTokenFactory_GetSignatureSecret_Call {
	return &EmailSignupJwtTokenFactory_GetSignatureSecret_Call{Call: _e.mock.On("GetSignatureSecret", claims)}
}

func (_c *EmailSignupJwtTokenFactory_GetSignatureSecret_Call) Run(run func(claims lib.EmailSignupTokenClaims)) *EmailSignupJwtTokenFactory_GetSignatureSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(lib.EmailSignupTokenClaims))
	})
	return _c
}

func (_c *EmailSignupJwtTokenFactory_GetSignatureSecret_Call) Return(_a0 []byte, _a1 intl.IntlError) *EmailSignupJwtTokenFactory_GetSignatureSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmailSignupJwtTokenFactory_GetSignatureSecret_Call) RunAndReturn(run func(lib.EmailSignupTokenClaims) ([]byte, intl.IntlError)) *EmailSignupJwtTokenFactory_GetSignatureSecret_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields: stringToken
func (_m *EmailSignupJwtTokenFactory) Parse(stringToken string) (lib.EmailSignupTokenClaims, intl.IntlError) {
	ret := _m.Called(stringToken)

	var r0 lib.EmailSignupTokenClaims
	var r1 intl.IntlError
	if rf, ok := ret.Get(0).(func(string) (lib.EmailSignupTokenClaims, intl.IntlError)); ok {
		return rf(stringToken)
	}
	if rf, ok := ret.Get(0).(func(string) lib.EmailSignupTokenClaims); ok {
		r0 = rf(stringToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lib.EmailSignupTokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) intl.IntlError); ok {
		r1 = rf(stringToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(intl.IntlError)
		}
	}

	return r0, r1
}

// EmailSignupJwtTokenFactory_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type EmailSignupJwtTokenFactory_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - stringToken string
func (_e *EmailSignupJwtTokenFactory_Expecter) Parse(stringToken interface{}) *EmailSignupJwtTokenFactory_Parse_Call {
	return &EmailSignupJwtTokenFactory_Parse_Call{Call: _e.mock.On("Parse", stringToken)}
}

func (_c *EmailSignupJwtTokenFactory_Parse_Call) Run(run func(stringToken string)) *EmailSignupJwtTokenFactory_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EmailSignupJwtTokenFactory_Parse_Call) Return(_a0 lib.EmailSignupTokenClaims, _a1 intl.IntlError) *EmailSignupJwtTokenFactory_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmailSignupJwtTokenFactory_Parse_Call) RunAndReturn(run func(string) (lib.EmailSignupTokenClaims, intl.IntlError)) *EmailSignupJwtTokenFactory_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailSignupJwtTokenFactory creates a new instance of EmailSignupJwtTokenFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailSignupJwtTokenFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailSignupJwtTokenFactory {
	mock := &EmailSignupJwtTokenFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
