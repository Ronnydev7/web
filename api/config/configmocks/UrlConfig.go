// Code generated by mockery v2.36.1. DO NOT EDIT.

package configmocks

import mock "github.com/stretchr/testify/mock"

// UrlConfig is an autogenerated mock type for the UrlConfig type
type UrlConfig struct {
	mock.Mock
}

type UrlConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *UrlConfig) EXPECT() *UrlConfig_Expecter {
	return &UrlConfig_Expecter{mock: &_m.Mock}
}

// GetHostname provides a mock function with given fields:
func (_m *UrlConfig) GetHostname() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UrlConfig_GetHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostname'
type UrlConfig_GetHostname_Call struct {
	*mock.Call
}

// GetHostname is a helper method to define mock.On call
func (_e *UrlConfig_Expecter) GetHostname() *UrlConfig_GetHostname_Call {
	return &UrlConfig_GetHostname_Call{Call: _e.mock.On("GetHostname")}
}

func (_c *UrlConfig_GetHostname_Call) Run(run func()) *UrlConfig_GetHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UrlConfig_GetHostname_Call) Return(_a0 string) *UrlConfig_GetHostname_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UrlConfig_GetHostname_Call) RunAndReturn(run func() string) *UrlConfig_GetHostname_Call {
	_c.Call.Return(run)
	return _c
}

// GetProtocol provides a mock function with given fields:
func (_m *UrlConfig) GetProtocol() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UrlConfig_GetProtocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProtocol'
type UrlConfig_GetProtocol_Call struct {
	*mock.Call
}

// GetProtocol is a helper method to define mock.On call
func (_e *UrlConfig_Expecter) GetProtocol() *UrlConfig_GetProtocol_Call {
	return &UrlConfig_GetProtocol_Call{Call: _e.mock.On("GetProtocol")}
}

func (_c *UrlConfig_GetProtocol_Call) Run(run func()) *UrlConfig_GetProtocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UrlConfig_GetProtocol_Call) Return(_a0 string) *UrlConfig_GetProtocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UrlConfig_GetProtocol_Call) RunAndReturn(run func() string) *UrlConfig_GetProtocol_Call {
	_c.Call.Return(run)
	return _c
}

// NewUrlConfig creates a new instance of UrlConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUrlConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *UrlConfig {
	mock := &UrlConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
