directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  superuserProfileID: ID
  emailCredentialID: ID
  loginSessionIDs: [ID!]
  publicProfileID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type EmailCredential implements Node {
  id: ID!
  email: String!
  owner: User!
}
"""
EmailCredentialWhereInput is used for filtering EmailCredential objects.
Input was generated by ent.
"""
input EmailCredentialWhereInput {
  not: EmailCredentialWhereInput
  and: [EmailCredentialWhereInput!]
  or: [EmailCredentialWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
type LoginSession implements Node {
  id: ID!
  lastLoginTime: Time!
  owner: User!
}
"""
LoginSessionWhereInput is used for filtering LoginSession objects.
Input was generated by ent.
"""
input LoginSessionWhereInput {
  not: LoginSessionWhereInput
  and: [LoginSessionWhereInput!]
  or: [LoginSessionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """last_login_time field predicates"""
  lastLoginTime: Time
  lastLoginTimeNEQ: Time
  lastLoginTimeIn: [Time!]
  lastLoginTimeNotIn: [Time!]
  lastLoginTimeGT: Time
  lastLoginTimeGTE: Time
  lastLoginTimeLT: Time
  lastLoginTimeLTE: Time
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "api/ent/entgenerated.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
type User implements Node {
  id: ID!
  emailCredential: EmailCredential
  loginSessions: [LoginSession!]
  publicProfile: UserPublicProfile
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type UserPublicProfile implements Node {
  id: ID!
  handleName: String!
  owner: User!
}
"""
UserPublicProfileWhereInput is used for filtering UserPublicProfile objects.
Input was generated by ent.
"""
input UserPublicProfileWhereInput {
  not: UserPublicProfileWhereInput
  and: [UserPublicProfileWhereInput!]
  or: [UserPublicProfileWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """handle_name field predicates"""
  handleName: String
  handleNameNEQ: String
  handleNameIn: [String!]
  handleNameNotIn: [String!]
  handleNameGT: String
  handleNameGTE: String
  handleNameLT: String
  handleNameLTE: String
  handleNameContains: String
  handleNameHasPrefix: String
  handleNameHasSuffix: String
  handleNameEqualFold: String
  handleNameContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """email_credential edge predicates"""
  hasEmailCredential: Boolean
  hasEmailCredentialWith: [EmailCredentialWhereInput!]
  """login_sessions edge predicates"""
  hasLoginSessions: Boolean
  hasLoginSessionsWith: [LoginSessionWhereInput!]
  """public_profile edge predicates"""
  hasPublicProfile: Boolean
  hasPublicProfileWith: [UserPublicProfileWhereInput!]
}
